/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * xngin: Experiments API
 * OpenAPI spec version: 0.9.0
 */
export interface AddMemberToOrganizationRequest {
	email: string;
}

export interface AddWebhookToOrganizationRequest {
	type: "experiment.created";
	/** @maxLength 500 */
	url: string;
}

/**
 * The value of the Authorization: header that will be sent with the request to the configured URL.
 */
export type AddWebhookToOrganizationResponseAuthToken = string | null;

/**
 * Information on the successfully created webhook.
 */
export interface AddWebhookToOrganizationResponse {
	/** The ID of the newly created webhook. */
	id: string;
	/** The type of webhook; e.g. experiment.created */
	type: string;
	/** The URL to notify. */
	url: string;
	/** The value of the Authorization: header that will be sent with the request to the configured URL. */
	auth_token: AddWebhookToOrganizationResponseAuthToken;
}

export interface ApiKeySummary {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 64 */
	datasource_id: string;
	/** @maxLength 64 */
	organization_id: string;
	/** @maxLength 100 */
	organization_name: string;
}

/**
 * ID of the arm. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence.
 */
export type ArmArmId = string | null;

export type ArmArmDescription = string | null;

/**
 * Describes an experiment treatment arm.
 */
export interface Arm {
	/** ID of the arm. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence. */
	arm_id?: ArmArmId;
	/** @maxLength 100 */
	arm_name: string;
	arm_description?: ArmArmDescription;
}

/**
 * ID of the arm. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence.
 */
export type ArmAnalysisArmId = string | null;

export type ArmAnalysisArmDescription = string | null;

export interface ArmAnalysis {
	/** ID of the arm. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence. */
	arm_id?: ArmAnalysisArmId;
	/** @maxLength 100 */
	arm_name: string;
	arm_description?: ArmAnalysisArmDescription;
	/** Whether this arm is the baseline/control arm for comparison. */
	is_baseline: boolean;
	/** The estimated treatment effect relative to the baseline arm. */
	estimate: number;
	/** The p-value indicating statistical significance of the treatment effect. */
	p_value: number;
	/** The t-statistic from the statistical test. */
	t_stat: number;
	/** The standard error of the treatment effect estimate. */
	std_error: number;
}

/**
 * Describes the number of participants assigned to each arm.
 */
export interface ArmSize {
	arm: Arm;
	size?: number;
}

export interface AssignRequest {
	design_spec: DesignSpecInput;
	audience_spec: AudienceSpecInput;
}

/**
 * Result of checking that the arms are balanced. May not be present if we are not able to stratify on any design metrics or other fields specified for stratification. (Fields used must be supported data types whose values are NOT all unique or all the same).
 */
export type AssignResponseInputBalanceCheck = BalanceCheck | null;

/**
 * Describes assignments for all participants and balance test results.
 */
export interface AssignResponseInput {
	/** Result of checking that the arms are balanced. May not be present if we are not able to stratify on any design metrics or other fields specified for stratification. (Fields used must be supported data types whose values are NOT all unique or all the same). */
	balance_check?: AssignResponseInputBalanceCheck;
	experiment_id: string;
	/** The number of participants across all arms in total. */
	sample_size: number;
	/** Name of the datasource field used as the unique identifier for the participant_id value stored in each Assignment, as configured in the datasource settings. Included for frontend convenience. */
	unique_id_field: string;
	assignments: Assignment[];
}

/**
 * Result of checking that the arms are balanced. May not be present if we are not able to stratify on any design metrics or other fields specified for stratification. (Fields used must be supported data types whose values are NOT all unique or all the same).
 */
export type AssignResponseOutputBalanceCheck = BalanceCheck | null;

/**
 * Describes assignments for all participants and balance test results.
 */
export interface AssignResponseOutput {
	/** Result of checking that the arms are balanced. May not be present if we are not able to stratify on any design metrics or other fields specified for stratification. (Fields used must be supported data types whose values are NOT all unique or all the same). */
	balance_check?: AssignResponseOutputBalanceCheck;
	experiment_id: string;
	/** The number of participants across all arms in total. */
	sample_size: number;
	/** Name of the datasource field used as the unique identifier for the participant_id value stored in each Assignment, as configured in the datasource settings. Included for frontend convenience. */
	unique_id_field: string;
	assignments: Assignment[];
}

/**
 * Balance test results if available. 'online' experiments do not have balance checks.
 */
export type AssignSummaryBalanceCheck = BalanceCheck | null;

/**
 * For each arm, the number of participants assigned. TODO: make required once development has stabilized. May be None if unknown due to persisting prior versions of an AssignSummary.
 */
export type AssignSummaryArmSizes = ArmSize[] | null;

/**
 * Key pieces of an AssignResponse without the assignments.
 */
export interface AssignSummary {
	/** Balance test results if available. 'online' experiments do not have balance checks. */
	balance_check?: AssignSummaryBalanceCheck;
	/** The number of participants across all arms in total. */
	sample_size: number;
	/** For each arm, the number of participants assigned. TODO: make required once development has stabilized. May be None if unknown due to persisting prior versions of an AssignSummary. */
	arm_sizes?: AssignSummaryArmSizes;
}

/**
 * List of properties and their values for this participant used for stratification or tracking metrics. If stratification is not used, this will be None.
 */
export type AssignmentStrata = Strata[] | null;

/**
 * Describes treatment assignment for an experiment participant.
 */
export interface Assignment {
	/** @maxLength 64 */
	participant_id: string;
	/** ID of the arm this participant was assigned to. Same as Arm.arm_id. */
	arm_id: string;
	/**
	 * The arm this participant was assigned to. Same as Arm.arm_name.
	 * @maxLength 100
	 */
	arm_name: string;
	/** List of properties and their values for this participant used for stratification or tracking metrics. If stratification is not used, this will be None. */
	strata?: AssignmentStrata;
}

/**
 * Defines target participants for an experiment using filters.
 */
export interface AudienceSpecInput {
	/** @maxLength 100 */
	participant_type: string;
	/** @maxItems 20 */
	filters: AudienceSpecFilter[];
}

/**
 * Defines target participants for an experiment using filters.
 */
export interface AudienceSpecOutput {
	/** @maxLength 100 */
	participant_type: string;
	/** @maxItems 20 */
	filters: AudienceSpecFilter[];
}

/**
 * Defines criteria for filtering rows by value.

## Examples

| Relation | Value       | logical Result                                    |
|----------|-------------|---------------------------------------------------|
| INCLUDES | [None]      | Match when `x IS NULL`                            |
| INCLUDES | ["a"]       | Match when `x IN ("a")`                           |
| INCLUDES | ["a", None] | Match when `x IS NULL OR x IN ("a")`              |
| INCLUDES | ["a", "b"]  | Match when `x IN ("a", "b")`                      |
| EXCLUDES | [None]      | Match `x IS NOT NULL`                             |
| EXCLUDES | ["a", None] | Match `x IS NOT NULL AND x NOT IN ("a")`          |
| EXCLUDES | ["a", "b"]  | Match `x IS NULL OR (x NOT IN ("a", "b"))`        |
| BETWEEN  | ["a", "z"]  | Match `"a" <= x <= "z"`                           |
| BETWEEN  | ["a", None] | Match `x >= "a"`                                  |

String comparisons are case-sensitive.

## Special Handling for Comma-Separated Fields

When the filter name ends in "experiment_ids", the filter is interpreted as follows:

| Value | Filter         | Result   |
|-------|----------------|----------|
| "a,b" | INCLUDES ["a"] | Match    |
| "a,b" | INCLUDES ["d"] | No match |
| "a,b" | EXCLUDES ["d"] | Match    |
| "a,b" | EXCLUDES ["b"] | No match |

Note: The BETWEEN relation is not supported for comma-separated values.

Note: CSV field comparisons are case-insensitive.

## Handling of datetime and timestamp values

DATETIME or TIMESTAMP-type columns support INCLUDES/EXCLUDES/BETWEEN, similar to numerics.

Values must be expressed as ISO8601 datetime strings compatible with Python's datetime.fromisoformat()
(https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).

If a timezone is provided, it must be UTC.
 */
export interface AudienceSpecFilter {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	relation: Relation;
	value: FilterValueTypes;
}

/**
 * Describes balance test results for treatment assignment.
 */
export interface BalanceCheck {
	/** F-statistic testing the overall significance of the model predicting treatment assignment. */
	f_statistic: number;
	/** The numerator degrees of freedom for the f-statistic related to number of dependent variables. */
	numerator_df: number;
	/** Denominator degrees of freedom related to the number of observations. */
	denominator_df: number;
	/** Probability of observing these data if strata do not predict treatment assignment, i.e. our randomization is balanced. */
	p_value: number;
	/** Whether the p-value for our observed f_statistic is greater than the f-stat threshold specified in our design specification. (See DesignSpec.fstat_thresh) */
	balance_ok: boolean;
}

export type BqDsnInputDriver =
	(typeof BqDsnInputDriver)[keyof typeof BqDsnInputDriver];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BqDsnInputDriver = {
	bigquery: "bigquery",
} as const;

/**
 * Describes a BigQuery connection.
 */
export interface BqDsnInput {
	driver: BqDsnInputDriver;
	/**
	 * The Google Cloud Project ID containing the dataset.
	 * @minLength 6
	 * @maxLength 30
	 * @pattern ^[a-z0-9-]+$
	 */
	project_id: string;
	/**
	 * The dataset name.
	 * @minLength 1
	 * @maxLength 1024
	 * @pattern ^[a-zA-Z0-9_]+$
	 */
	dataset_id: string;
	credentials: GcpCredentials;
}

export type BqDsnOutputDriver =
	(typeof BqDsnOutputDriver)[keyof typeof BqDsnOutputDriver];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BqDsnOutputDriver = {
	bigquery: "bigquery",
} as const;

/**
 * Describes a BigQuery connection.
 */
export interface BqDsnOutput {
	driver: BqDsnOutputDriver;
	/**
	 * The Google Cloud Project ID containing the dataset.
	 * @minLength 6
	 * @maxLength 30
	 * @pattern ^[a-z0-9-]+$
	 */
	project_id: string;
	/**
	 * The dataset name.
	 * @minLength 1
	 * @maxLength 1024
	 * @pattern ^[a-zA-Z0-9_]+$
	 */
	dataset_id: string;
	credentials: GcpCredentials;
}

/**
 * The credentials returned to the SPA.
 */
export interface CallbackResponse {
	/** The ID token as generated by Google. Represents a successful authentication. */
	id_token: string;
}

/**
 * Optionally include the power analyses of your tracking metrics if performed.
 */
export type CommitRequestPowerAnalyses = PowerResponseInput | null;

/**
 * The complete experiment configuration to persist in an experiment registry.
 */
export interface CommitRequest {
	design_spec: DesignSpecInput;
	audience_spec: AudienceSpecInput;
	/** Optionally include the power analyses of your tracking metrics if performed. */
	power_analyses?: CommitRequestPowerAnalyses;
	experiment_assignment: AssignResponseInput;
}

export interface CreateApiKeyResponse {
	/** @maxLength 64 */
	id: string;
	datasource_id: string;
	key: string;
}

export interface CreateDatasourceRequest {
	/** @maxLength 64 */
	organization_id: string;
	name: string;
	dwh: DwhInput;
}

export interface CreateDatasourceResponse {
	/** @maxLength 64 */
	id: string;
}

export type CreateExperimentRequestPowerAnalyses = PowerResponseInput | null;

export interface CreateExperimentRequest {
	design_spec: DesignSpecInput;
	audience_spec: AudienceSpecInput;
	power_analyses?: CreateExperimentRequestPowerAnalyses;
}

export type CreateExperimentResponsePowerAnalyses = PowerResponseOutput | null;

/**
 * Same as the request but with ids filled for the experiment and arms, and summary info on the assignment.
 */
export interface CreateExperimentResponse {
	datasource_id: string;
	/** Current state of this experiment. */
	state: ExperimentState;
	design_spec: DesignSpecOutput;
	audience_spec: AudienceSpecOutput;
	power_analyses: CreateExperimentResponsePowerAnalyses;
	assign_summary: AssignSummary;
}

export interface CreateOrganizationRequest {
	/** @maxLength 100 */
	name: string;
}

export interface CreateOrganizationResponse {
	/** @maxLength 64 */
	id: string;
}

export interface CreateParticipantsTypeRequest {
	/** @maxLength 100 */
	participant_type: string;
	schema_def: ParticipantsSchemaInput;
}

export interface CreateParticipantsTypeResponse {
	/** @maxLength 100 */
	participant_type: string;
	schema_def: ParticipantsSchemaOutput;
}

/**
 * Defines the supported data types for fields in the data source.
 */
export type DataType = (typeof DataType)[keyof typeof DataType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DataType = {
	boolean: "boolean",
	character_varying: "character varying",
	uuid: "uuid",
	date: "date",
	integer: "integer",
	double_precision: "double precision",
	numeric: "numeric",
	timestamp_without_time_zone: "timestamp without time zone",
	timestamp_with_time_zone: "timestamp with time zone",
	bigint: "bigint",
	"jsonb_(unsupported)": "jsonb (unsupported)",
	"json_(unsupported)": "json (unsupported)",
	unsupported: "unsupported",
} as const;

export type DatasourceConfigWebhookConfig = WebhookConfig | null;

/**
 * RemoteDatabaseConfig defines a configuration for a remote data warehouse.
 */
export interface DatasourceConfig {
	participants: ParticipantsConfig[];
	webhook_config?: DatasourceConfigWebhookConfig;
	type: "remote";
	dwh: DwhOutput;
}

export interface DatasourceSummary {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 100 */
	name: string;
	driver: string;
	type: string;
	/** @maxLength 64 */
	organization_id: string;
	/** @maxLength 100 */
	organization_name: string;
}

export type DesignSpecInput = PreassignedExperimentSpec | OnlineExperimentSpec;

export type DesignSpecOutput = PreassignedExperimentSpec | OnlineExperimentSpec;

/**
 * Percent change target relative to the metric_baseline.
 */
export type DesignSpecMetricMetricPctChange = number | null;

/**
 * Absolute target value = metric_baseline*(1 + metric_pct_change)
 */
export type DesignSpecMetricMetricTarget = number | null;

/**
 * Inferred from dwh type.
 */
export type DesignSpecMetricMetricType = MetricType | null;

/**
 * Mean of the tracked metric.
 */
export type DesignSpecMetricMetricBaseline = number | null;

/**
 * Standard deviation is set only for metric_type.NUMERIC metrics. Must be set for numeric metrics when available_n > 0.
 */
export type DesignSpecMetricMetricStddev = number | null;

/**
 * The number of participants meeting the filtering criteria with a *non-null* value for this metric.
 */
export type DesignSpecMetricAvailableNonnullN = number | null;

/**
 * The number of participants meeting the filtering criteria regardless of whether or not this metric's value is NULL. NOTE: Assignments are made from the targeted aviailable_n population, so be sure you are ok with participants potentially having this value missing during assignment if available_n != available_nonnull_n.
 */
export type DesignSpecMetricAvailableN = number | null;

/**
 * Defines a metric to measure in an experiment with its baseline stats.
 */
export interface DesignSpecMetric {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	/** Percent change target relative to the metric_baseline. */
	metric_pct_change?: DesignSpecMetricMetricPctChange;
	/** Absolute target value = metric_baseline*(1 + metric_pct_change) */
	metric_target?: DesignSpecMetricMetricTarget;
	/** Inferred from dwh type. */
	metric_type?: DesignSpecMetricMetricType;
	/** Mean of the tracked metric. */
	metric_baseline?: DesignSpecMetricMetricBaseline;
	/** Standard deviation is set only for metric_type.NUMERIC metrics. Must be set for numeric metrics when available_n > 0. */
	metric_stddev?: DesignSpecMetricMetricStddev;
	/** The number of participants meeting the filtering criteria with a *non-null* value for this metric. */
	available_nonnull_n?: DesignSpecMetricAvailableNonnullN;
	/** The number of participants meeting the filtering criteria regardless of whether or not this metric's value is NULL. NOTE: Assignments are made from the targeted aviailable_n population, so be sure you are ok with participants potentially having this value missing during assignment if available_n != available_nonnull_n. */
	available_n?: DesignSpecMetricAvailableN;
}

/**
 * Specify a meaningful min percent change relative to the metric_baseline you want to detect. Cannot be set if you set metric_target.
 */
export type DesignSpecMetricRequestMetricPctChange = number | null;

/**
 * Specify the absolute value you want to detect. Cannot be set if you set metric_pct_change.
 */
export type DesignSpecMetricRequestMetricTarget = number | null;

/**
 * Defines a request to look up baseline stats for a metric to measure in an experiment.
 */
export interface DesignSpecMetricRequest {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	/** Specify a meaningful min percent change relative to the metric_baseline you want to detect. Cannot be set if you set metric_target. */
	metric_pct_change?: DesignSpecMetricRequestMetricPctChange;
	/** Specify the absolute value you want to detect. Cannot be set if you set metric_pct_change. */
	metric_target?: DesignSpecMetricRequestMetricTarget;
}

export type DsnDriver = (typeof DsnDriver)[keyof typeof DsnDriver];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DsnDriver = {
	"postgresql+psycopg": "postgresql+psycopg",
	"postgresql+psycopg2": "postgresql+psycopg2",
} as const;

export type DsnSslmode = (typeof DsnSslmode)[keyof typeof DsnSslmode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DsnSslmode = {
	disable: "disable",
	require: "require",
	"verify-ca": "verify-ca",
	"verify-full": "verify-full",
} as const;

export type DsnSearchPath = string | null;

/**
 * Describes a set of parameters suitable for connecting to most types of remote databases.
 */
export interface Dsn {
	driver: DsnDriver;
	host: string;
	/**
	 * @minimum 1024
	 * @maximum 65535
	 */
	port?: number;
	user: string;
	password: string;
	dbname: string;
	sslmode: DsnSslmode;
	search_path?: DsnSearchPath;
}

export type DwhInput = Dsn | BqDsnInput;

export type DwhOutput = Dsn | BqDsnOutput;

/**
 * A navigable link to related information.
 */
export type EventSummaryLink = string | null;

export type EventSummaryDetailsAnyOf = { [key: string]: unknown };

/**
 * Details
 */
export type EventSummaryDetails = EventSummaryDetailsAnyOf | null;

/**
 * Describes an event.
 */
export interface EventSummary {
	/** The ID of the event. */
	id: string;
	/** The time the event was created. */
	created_at: string;
	/** The type of event. */
	type: string;
	/** Human-readable summary of the event. */
	summary: string;
	/** A navigable link to related information. */
	link?: EventSummaryLink;
	/** Details */
	details: EventSummaryDetails;
}

/**
 * Describes the change if any in metrics targeted by an experiment.
 */
export interface ExperimentAnalysis {
	/** ID of the experiment. */
	experiment_id: string;
	/** Contains one analysis per metric targeted by the experiment. */
	metric_analyses: MetricAnalysis[];
}

export type ExperimentConfigPowerAnalyses = PowerResponseOutput | null;

/**
 * Representation of our stored Experiment information.
 */
export interface ExperimentConfig {
	datasource_id: string;
	/** Current state of this experiment. */
	state: ExperimentState;
	design_spec: DesignSpecOutput;
	audience_spec: AudienceSpecOutput;
	power_analyses: ExperimentConfigPowerAnalyses;
	assign_summary: AssignSummary;
}

/**
 * Experiment lifecycle states.

note: [starting state], [[terminal state]]
[DESIGNING]->[ASSIGNED]->{[[ABANDONED]], COMMITTED}->[[ABORTED]]
 */
export type ExperimentState =
	(typeof ExperimentState)[keyof typeof ExperimentState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExperimentState = {
	designing: "designing",
	assigned: "assigned",
	abandoned: "abandoned",
	committed: "committed",
	aborted: "aborted",
} as const;

export type FieldDescriptorExtraAnyOf = { [key: string]: string };

/**
 * Additional field metadata
 */
export type FieldDescriptorExtra = FieldDescriptorExtraAnyOf | null;

export interface FieldDescriptor {
	/** Name of the field in the data source */
	field_name: string;
	/** The data type of this field */
	data_type: DataType;
	/** Human-readable description of the field */
	description?: string;
	/** Whether this field uniquely identifies records */
	is_unique_id?: boolean;
	/** Whether this field should be used for stratification */
	is_strata?: boolean;
	/** Whether this field can be used as a filter */
	is_filter?: boolean;
	/** Whether this field can be used as a metric */
	is_metric?: boolean;
	/** Additional field metadata */
	extra?: FieldDescriptorExtra;
}

/**
 * Concise summary of fields in the table.
 */
export interface FieldMetadata {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	data_type: DataType;
	/** @maxLength 2000 */
	description: string;
}

export type FilterValueTypesAnyOfItem = number | null;

export type FilterValueTypesAnyOfTwoItem = number | null;

export type FilterValueTypesAnyOfThreeItem = string | null;

export type FilterValueTypesAnyOfFourItem = boolean | null;

export type FilterValueTypes =
	| FilterValueTypesAnyOfItem[]
	| FilterValueTypesAnyOfTwoItem[]
	| FilterValueTypesAnyOfThreeItem[]
	| FilterValueTypesAnyOfFourItem[];

export type GcpCredentials = GcpServiceAccountInfo | GcpServiceAccountFile;

export type GcpServiceAccountFileType =
	(typeof GcpServiceAccountFileType)[keyof typeof GcpServiceAccountFileType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GcpServiceAccountFileType = {
	serviceaccountfile: "serviceaccountfile",
} as const;

/**
 * Describes a file path to a Google Cloud Service Account credential file.
 */
export interface GcpServiceAccountFile {
	type: GcpServiceAccountFileType;
	/** The path to the service account credentials file containing the credentials in canonical JSON form. */
	path: string;
}

export type GcpServiceAccountInfoType =
	(typeof GcpServiceAccountInfoType)[keyof typeof GcpServiceAccountInfoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GcpServiceAccountInfoType = {
	serviceaccountinfo: "serviceaccountinfo",
} as const;

/**
 * Describes a Google Cloud Service Account credential.
 */
export interface GcpServiceAccountInfo {
	type: GcpServiceAccountInfoType;
	/**
	 * The base64-encoded service account info in the canonical JSON form.
	 * @minLength 4
	 * @maxLength 8000
	 */
	content_base64: string;
}

export interface GetDatasourceResponse {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 100 */
	name: string;
	config: DatasourceConfig;
	/** @maxLength 64 */
	organization_id: string;
	/** @maxLength 100 */
	organization_name: string;
}

/**
 * Balance test results if available. 'online' experiments do not have balance checks.
 */
export type GetExperimentAssignmentsResponseBalanceCheck = BalanceCheck | null;

/**
 * Describes assignments for all participants and balance test results if available.
 */
export interface GetExperimentAssignmentsResponse {
	/** Balance test results if available. 'online' experiments do not have balance checks. */
	balance_check?: GetExperimentAssignmentsResponseBalanceCheck;
	experiment_id: string;
	sample_size: number;
	assignments: Assignment[];
}

export type GetExperimentResponsePowerAnalyses = PowerResponseOutput | null;

/**
 * An experiment configuration capturing all info at design time when assignment was made.
 */
export interface GetExperimentResponse {
	datasource_id: string;
	/** Current state of this experiment. */
	state: ExperimentState;
	design_spec: DesignSpecOutput;
	audience_spec: AudienceSpecOutput;
	power_analyses: GetExperimentResponsePowerAnalyses;
	assign_summary: AssignSummary;
}

/**
 * Response model for the /filters endpoint.
 */
export interface GetFiltersResponse {
	results: GetFiltersResponseElement[];
}

/**
 * Sorted list of unique values.
 */
export type GetFiltersResponseDiscreteDistinctValues = string[] | null;

/**
 * Describes a discrete filter variable.
 */
export interface GetFiltersResponseDiscrete {
	/**
	 * Name of the field.
	 * @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$
	 */
	field_name: string;
	data_type: DataType;
	/**
	 * @minItems 1
	 * @maxItems 20
	 */
	relations: Relation[];
	/** @maxLength 2000 */
	description: string;
	/** Sorted list of unique values. */
	distinct_values: GetFiltersResponseDiscreteDistinctValues;
}

export type GetFiltersResponseElement =
	| GetFiltersResponseNumericOrDate
	| GetFiltersResponseDiscrete;

/**
 * The minimum observed value.
 */
export type GetFiltersResponseNumericOrDateMin =
	| string
	| string
	| number
	| number
	| null;

/**
 * The maximum observed value.
 */
export type GetFiltersResponseNumericOrDateMax =
	| string
	| string
	| number
	| number
	| null;

/**
 * Describes a numeric or date filter variable.
 */
export interface GetFiltersResponseNumericOrDate {
	/**
	 * Name of the field.
	 * @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$
	 */
	field_name: string;
	data_type: DataType;
	/**
	 * @minItems 1
	 * @maxItems 20
	 */
	relations: Relation[];
	/** @maxLength 2000 */
	description: string;
	/** The minimum observed value. */
	min: GetFiltersResponseNumericOrDateMin;
	/** The maximum observed value. */
	max: GetFiltersResponseNumericOrDateMax;
}

/**
 * Response model for the /metrics endpoint.
 */
export interface GetMetricsResponse {
	results: GetMetricsResponseElement[];
}

/**
 * Describes a metric.
 */
export interface GetMetricsResponseElement {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	data_type: DataType;
	/** @maxLength 2000 */
	description: string;
}

export interface GetOrganizationResponse {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 100 */
	name: string;
	users: UserSummary[];
	datasources: DatasourceSummary[];
}

/**
 * Null if no assignment. assignment.strata are not included.
 */
export type GetParticipantAssignmentResponseAssignment = Assignment | null;

/**
 * Describes assignment for a single <experiment, participant> pair.
 */
export interface GetParticipantAssignmentResponse {
	experiment_id: string;
	participant_id: string;
	/** Null if no assignment. assignment.strata are not included. */
	assignment: GetParticipantAssignmentResponseAssignment;
}

/**
 * Response model for the /strata endpoint.
 */
export interface GetStrataResponse {
	results: GetStrataResponseElement[];
}

export type GetStrataResponseElementExtraAnyOf = { [key: string]: string };

export type GetStrataResponseElementExtra =
	GetStrataResponseElementExtraAnyOf | null;

/**
 * Describes a stratification variable.
 */
export interface GetStrataResponseElement {
	data_type: DataType;
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	/** @maxLength 2000 */
	description: string;
	extra?: GetStrataResponseElementExtra;
}

export interface HTTPExceptionError {
	detail: string;
}

export interface HTTPValidationError {
	detail?: ValidationError[];
}

export type HttpMethodTypes =
	(typeof HttpMethodTypes)[keyof typeof HttpMethodTypes];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HttpMethodTypes = {
	GET: "GET",
	POST: "POST",
	PUT: "PUT",
	PATCH: "PATCH",
	DELETE: "DELETE",
} as const;

export interface InspectDatasourceResponse {
	tables: string[];
}

/**
 * Describes a table in the datasource.
 */
export interface InspectDatasourceTableResponse {
	/** Fields that are possibly candidates for unique IDs. */
	detected_unique_id_fields: string[];
	/** Fields in the table. */
	fields: FieldMetadata[];
}

/**
 * Describes a participant type's strata, metrics, and filters (including exemplar values).
 */
export interface InspectParticipantTypesResponse {
	filters: GetFiltersResponseElement[];
	metrics: GetMetricsResponseElement[];
	strata: GetStrataResponseElement[];
}

export interface ListApiKeysResponse {
	items: ApiKeySummary[];
}

export interface ListDatasourcesResponse {
	items: DatasourceSummary[];
}

export interface ListExperimentsResponse {
	items: ExperimentConfig[];
}

export interface ListOrganizationEventsResponse {
	items: EventSummary[];
}

export interface ListOrganizationsResponse {
	items: OrganizationSummary[];
}

export interface ListParticipantsTypeResponse {
	items: ParticipantsConfig[];
}

export interface ListWebhooksResponse {
	items: WebhookSummary[];
}

export type MetricAnalysisMetricName = string | null;

export type MetricAnalysisMetric = DesignSpecMetricRequest | null;

/**
 * Describes the change in a single metric for each arm of an experiment.
 */
export interface MetricAnalysis {
	metric_name?: MetricAnalysisMetricName;
	metric?: MetricAnalysisMetric;
	/** The results of the analysis for each arm (coefficient) for this specific metric. */
	arm_analyses: ArmAnalysis[];
}

/**
 * Minimum sample size needed to meet the design specs.
 */
export type MetricPowerAnalysisInputTargetN = number | null;

/**
 * Whether or not there are enough available units to sample from to meet target_n.
 */
export type MetricPowerAnalysisInputSufficientN = boolean | null;

/**
 * If there is an insufficient sample size to meet the desired metric_target, we report what is possible given the available_n. This value is equivalent to the relative pct_change_possible. This is None when there is a sufficient sample size to detect the desired change.
 */
export type MetricPowerAnalysisInputTargetPossible = number | null;

/**
 * If there is an insufficient sample size to meet the desired metric_pct_change, we report what is possible given the available_n. This value is equivalent to the absolute target_possible. This is None when there is a sufficient sample size to detect the desired change.
 */
export type MetricPowerAnalysisInputPctChangePossible = number | null;

/**
 * Human friendly message about the above results.
 */
export type MetricPowerAnalysisInputMsg = MetricPowerAnalysisMessage | null;

/**
 * Describes analysis results of a single metric.
 */
export interface MetricPowerAnalysisInput {
	metric_spec: DesignSpecMetric;
	/** Minimum sample size needed to meet the design specs. */
	target_n?: MetricPowerAnalysisInputTargetN;
	/** Whether or not there are enough available units to sample from to meet target_n. */
	sufficient_n?: MetricPowerAnalysisInputSufficientN;
	/** If there is an insufficient sample size to meet the desired metric_target, we report what is possible given the available_n. This value is equivalent to the relative pct_change_possible. This is None when there is a sufficient sample size to detect the desired change. */
	target_possible?: MetricPowerAnalysisInputTargetPossible;
	/** If there is an insufficient sample size to meet the desired metric_pct_change, we report what is possible given the available_n. This value is equivalent to the absolute target_possible. This is None when there is a sufficient sample size to detect the desired change. */
	pct_change_possible?: MetricPowerAnalysisInputPctChangePossible;
	/** Human friendly message about the above results. */
	msg?: MetricPowerAnalysisInputMsg;
}

/**
 * Minimum sample size needed to meet the design specs.
 */
export type MetricPowerAnalysisOutputTargetN = number | null;

/**
 * Whether or not there are enough available units to sample from to meet target_n.
 */
export type MetricPowerAnalysisOutputSufficientN = boolean | null;

/**
 * If there is an insufficient sample size to meet the desired metric_target, we report what is possible given the available_n. This value is equivalent to the relative pct_change_possible. This is None when there is a sufficient sample size to detect the desired change.
 */
export type MetricPowerAnalysisOutputTargetPossible = number | null;

/**
 * If there is an insufficient sample size to meet the desired metric_pct_change, we report what is possible given the available_n. This value is equivalent to the absolute target_possible. This is None when there is a sufficient sample size to detect the desired change.
 */
export type MetricPowerAnalysisOutputPctChangePossible = number | null;

/**
 * Human friendly message about the above results.
 */
export type MetricPowerAnalysisOutputMsg = MetricPowerAnalysisMessage | null;

/**
 * Describes analysis results of a single metric.
 */
export interface MetricPowerAnalysisOutput {
	metric_spec: DesignSpecMetric;
	/** Minimum sample size needed to meet the design specs. */
	target_n?: MetricPowerAnalysisOutputTargetN;
	/** Whether or not there are enough available units to sample from to meet target_n. */
	sufficient_n?: MetricPowerAnalysisOutputSufficientN;
	/** If there is an insufficient sample size to meet the desired metric_target, we report what is possible given the available_n. This value is equivalent to the relative pct_change_possible. This is None when there is a sufficient sample size to detect the desired change. */
	target_possible?: MetricPowerAnalysisOutputTargetPossible;
	/** If there is an insufficient sample size to meet the desired metric_pct_change, we report what is possible given the available_n. This value is equivalent to the absolute target_possible. This is None when there is a sufficient sample size to detect the desired change. */
	pct_change_possible?: MetricPowerAnalysisOutputPctChangePossible;
	/** Human friendly message about the above results. */
	msg?: MetricPowerAnalysisOutputMsg;
}

export type MetricPowerAnalysisMessageValuesAnyOf = {
	[key: string]: number | number;
};

export type MetricPowerAnalysisMessageValues =
	MetricPowerAnalysisMessageValuesAnyOf | null;

/**
 * Describes interpretation of power analysis results.
 */
export interface MetricPowerAnalysisMessage {
	type: MetricPowerAnalysisMessageType;
	/** Main power analysis result stated in human-friendly English. */
	msg: string;
	/** Power analysis result formatted as a template string with curly-braced {} named placeholders. Use with the dictionary of values to support localization of messages. */
	source_msg: string;
	values?: MetricPowerAnalysisMessageValues;
}

/**
 * Classifies metric power analysis results.
 */
export type MetricPowerAnalysisMessageType =
	(typeof MetricPowerAnalysisMessageType)[keyof typeof MetricPowerAnalysisMessageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricPowerAnalysisMessageType = {
	sufficient: "sufficient",
	insufficient: "insufficient",
	no_baseline: "no baseline",
	no_available_n: "no available n",
	zero_effect_size: "zero effect size",
} as const;

/**
 * Classifies metrics by their value type.
 */
export type MetricType = (typeof MetricType)[keyof typeof MetricType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricType = {
	binary: "binary",
	numeric: "numeric",
} as const;

/**
 * ID of the experiment. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence.
 */
export type OnlineExperimentSpecExperimentId = string | null;

export type OnlineExperimentSpecExperimentType =
	(typeof OnlineExperimentSpecExperimentType)[keyof typeof OnlineExperimentSpecExperimentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OnlineExperimentSpecExperimentType = {
	online: "online",
} as const;

/**
 * Use this type to randomly assign participants into arms during live experiment execution.

For example, you may wish to experiment on new users. Assignments are issued via API request.
 */
export interface OnlineExperimentSpec {
	/** ID of the experiment. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence. */
	experiment_id?: OnlineExperimentSpecExperimentId;
	experiment_type: OnlineExperimentSpecExperimentType;
	/** @maxLength 100 */
	experiment_name: string;
	/** @maxLength 2000 */
	description: string;
	start_date: string;
	end_date: string;
	/**
	 * @minItems 2
	 * @maxItems 10
	 */
	arms: Arm[];
	/**
	 * List of participant_type variables to use for stratification.
	 * @maxItems 150
	 */
	strata_field_names: string[];
	/**
	 * Primary and optional secondary metrics to target.
	 * @minItems 1
	 * @maxItems 150
	 */
	metrics: DesignSpecMetricRequest[];
	/**
	 * The chance of detecting a real non-null effect, i.e. 1 - false negative rate.
	 * @minimum 0
	 * @maximum 1
	 */
	power?: number;
	/**
	 * The chance of a false positive, i.e. there is no real non-null effect, but we mistakenly think there is one.
	 * @minimum 0
	 * @maximum 1
	 */
	alpha?: number;
	/**
	 * Threshold on the p-value of joint significance in doing the omnibus balance check, above which we declare the data to be "balanced".
	 * @minimum 0
	 * @maximum 1
	 */
	fstat_thresh?: number;
}

export interface OrganizationSummary {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 100 */
	name: string;
}

export type ParticipantsConfig = SheetParticipantsRef | ParticipantsDef;

export type ParticipantsDefType =
	(typeof ParticipantsDefType)[keyof typeof ParticipantsDefType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ParticipantsDefType = {
	schema: "schema",
} as const;

export interface ParticipantsDef {
	/** Name of the table in the data warehouse */
	table_name: string;
	/** List of fields available in this table */
	fields: FieldDescriptor[];
	/** The name of the set of participants defined by the filters. This name must be unique within a datasource. */
	participant_type: string;
	type: ParticipantsDefType;
}

/**
 * Represents a single worksheet describing metadata about a type of Participant.
 */
export interface ParticipantsSchemaInput {
	/** Name of the table in the data warehouse */
	table_name: string;
	/** List of fields available in this table */
	fields: FieldDescriptor[];
}

/**
 * Represents a single worksheet describing metadata about a type of Participant.
 */
export interface ParticipantsSchemaOutput {
	/** Name of the table in the data warehouse */
	table_name: string;
	/** List of fields available in this table */
	fields: FieldDescriptor[];
}

export interface PowerRequest {
	design_spec: DesignSpecInput;
	audience_spec: AudienceSpecInput;
}

export interface PowerResponseInput {
	/** @maxItems 150 */
	analyses: MetricPowerAnalysisInput[];
}

export interface PowerResponseOutput {
	/** @maxItems 150 */
	analyses: MetricPowerAnalysisOutput[];
}

/**
 * ID of the experiment. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence.
 */
export type PreassignedExperimentSpecExperimentId = string | null;

export type PreassignedExperimentSpecExperimentType =
	(typeof PreassignedExperimentSpecExperimentType)[keyof typeof PreassignedExperimentSpecExperimentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PreassignedExperimentSpecExperimentType = {
	preassigned: "preassigned",
} as const;

/**
 * Use this type to randomly select and assign from existing participants at design time.
 */
export interface PreassignedExperimentSpec {
	/** ID of the experiment. If creating a new experiment (POST /datasources/{datasource_id}/experiments), this is generated for you and made available in the response; you should NOT set this. Only generate ids of your own if using the stateless Experiment Design API as you will do your own persistence. */
	experiment_id?: PreassignedExperimentSpecExperimentId;
	experiment_type: PreassignedExperimentSpecExperimentType;
	/** @maxLength 100 */
	experiment_name: string;
	/** @maxLength 2000 */
	description: string;
	start_date: string;
	end_date: string;
	/**
	 * @minItems 2
	 * @maxItems 10
	 */
	arms: Arm[];
	/**
	 * List of participant_type variables to use for stratification.
	 * @maxItems 150
	 */
	strata_field_names: string[];
	/**
	 * Primary and optional secondary metrics to target.
	 * @minItems 1
	 * @maxItems 150
	 */
	metrics: DesignSpecMetricRequest[];
	/**
	 * The chance of detecting a real non-null effect, i.e. 1 - false negative rate.
	 * @minimum 0
	 * @maximum 1
	 */
	power?: number;
	/**
	 * The chance of a false positive, i.e. there is no real non-null effect, but we mistakenly think there is one.
	 * @minimum 0
	 * @maximum 1
	 */
	alpha?: number;
	/**
	 * Threshold on the p-value of joint significance in doing the omnibus balance check, above which we declare the data to be "balanced".
	 * @minimum 0
	 * @maximum 1
	 */
	fstat_thresh?: number;
}

/**
 * Defines operators for filtering values.

INCLUDES matches when the value matches any of the provided values, including null if explicitly
specified. For CSV fields (i.e. experiment_ids), any value in the CSV that matches the provided
values will match, but nulls are unsupported. This is equivalent to NOT(EXCLUDES(values)).

EXCLUDES matches when the value does not match any of the provided values, including null if
explicitly specified. If null is not explicitly excluded, we include nulls in the result.  CSV
fields (i.e. experiment_ids), the match will fail if any of the provided values are present
in the value, but nulls are unsupported.

BETWEEN matches when the value is between the two provided values (inclusive). Not allowed for CSV fields.
 */
export type Relation = (typeof Relation)[keyof typeof Relation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Relation = {
	includes: "includes",
	excludes: "excludes",
	between: "between",
} as const;

export type SheetParticipantsRefType =
	(typeof SheetParticipantsRefType)[keyof typeof SheetParticipantsRefType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SheetParticipantsRefType = {
	sheet: "sheet",
} as const;

export interface SheetParticipantsRef {
	/** The name of the set of participants defined by the filters. This name must be unique within a datasource. */
	participant_type: string;
	type: SheetParticipantsRefType;
	table_name: string;
	sheet: SheetRef;
}

export interface SheetRef {
	url: string;
	worksheet: string;
}

export type StrataStrataValue = string | null;

/**
 * Describes stratification for an experiment participant.
 */
export interface Strata {
	/** @pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ */
	field_name: string;
	strata_value?: StrataStrataValue;
}

export interface TokenInfo {
	email: string;
	iss: string;
	sub: string;
	hd: string;
}

export type UpdateDatasourceRequestName = string | null;

export type UpdateDatasourceRequestDwh = DwhInput | null;

export interface UpdateDatasourceRequest {
	name?: UpdateDatasourceRequestName;
	dwh?: UpdateDatasourceRequestDwh;
}

export type UpdateOrganizationRequestName = string | null;

export interface UpdateOrganizationRequest {
	name?: UpdateOrganizationRequestName;
}

export type UpdateParticipantsTypeRequestParticipantType = string | null;

export type UpdateParticipantsTypeRequestTableName = string | null;

export type UpdateParticipantsTypeRequestFields = FieldDescriptor[] | null;

export interface UpdateParticipantsTypeRequest {
	participant_type?: UpdateParticipantsTypeRequestParticipantType;
	table_name?: UpdateParticipantsTypeRequestTableName;
	fields?: UpdateParticipantsTypeRequestFields;
}

export type UpdateParticipantsTypeResponseTableName = string | null;

export type UpdateParticipantsTypeResponseFields = FieldDescriptor[] | null;

export interface UpdateParticipantsTypeResponse {
	/** @maxLength 100 */
	participant_type: string;
	table_name?: UpdateParticipantsTypeResponseTableName;
	fields?: UpdateParticipantsTypeResponseFields;
}

export interface UserSummary {
	/** @maxLength 64 */
	id: string;
	/** @maxLength 64 */
	email: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
	loc: ValidationErrorLocItem[];
	msg: string;
	type: string;
}

export type WebhookActionsCommit = WebhookUrl | null;

/**
 * The set of supported actions that trigger a user callback.
 */
export interface WebhookActions {
	commit?: WebhookActionsCommit;
}

export type WebhookCommonHeadersAuthorization = string | null;

/**
 * Enumerates supported headers to attach to all webhook requests.
 */
export interface WebhookCommonHeaders {
	authorization: WebhookCommonHeadersAuthorization;
}

/**
 * Top-level configuration object for user-defined webhooks.
 */
export interface WebhookConfig {
	actions: WebhookActions;
	common_headers: WebhookCommonHeaders;
}

/**
 * Generic wrapper around upstream webhook responses.
 */
export interface WebhookResponse {
	/** HTTP status code we received from the webhook's server. */
	status_code: number;
	/** HTTP body (if any) we received from the webhook's server. May be empty. */
	body: string;
}

/**
 * The value of the Authorization: header that will be sent with the request to the configured URL.
 */
export type WebhookSummaryAuthToken = string | null;

/**
 * Summarizes a Webhook configuration for an organization.
 */
export interface WebhookSummary {
	/** The ID of the webhook. */
	id: string;
	/** The type of webhook; e.g. experiment.created */
	type: string;
	/** The URL to notify. */
	url: string;
	/** The value of the Authorization: header that will be sent with the request to the configured URL. */
	auth_token: WebhookSummaryAuthToken;
}

/**
 * Represents a url and HTTP method to use with it.
 */
export interface WebhookUrl {
	method: HttpMethodTypes;
	url: string;
}

export type InspectDatasourceParams = {
	/**
	 * Refresh the cache.
	 */
	refresh?: boolean;
};

export type InspectTableInDatasourceParams = {
	/**
	 * Refresh the cache.
	 */
	refresh?: boolean;
};

export type InspectParticipantTypesParams = {
	/**
	 * Refresh the cache.
	 */
	refresh?: boolean;
};

export type CreateExperimentWithAssignmentParams = {
	/**
	 * Number of participants to assign.
	 */
	chosen_n: number;
	/**
	 * Whether to also stratify on metrics during assignment.
	 */
	stratify_on_metrics?: boolean;
};

export type AnalyzeExperimentParams = {
	/**
	 * UUID of the baseline arm. If None, the first design spec arm is used.
	 */
	baseline_arm_id?: string | null;
};
