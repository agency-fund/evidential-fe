/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * xngin: Experiments API
 * OpenAPI spec version: 0.9.0
 */
import { z as zod } from "zod";

/**
 * Returns basic metadata about the authenticated caller of this method.
 * @summary Caller Identity
 */
export const callerIdentityResponse = zod.object({
	email: zod.string(),
	iss: zod.string(),
	sub: zod.string(),
	hd: zod.string(),
});

/**
 * Returns a list of organizations that the authenticated user is a member of.
 * @summary List Organizations
 */
export const listOrganizationsResponseItemsItemIdMax = 64;
export const listOrganizationsResponseItemsItemNameMax = 100;

export const listOrganizationsResponse = zod.object({
	items: zod.array(
		zod.object({
			id: zod.string().max(listOrganizationsResponseItemsItemIdMax),
			name: zod.string().max(listOrganizationsResponseItemsItemNameMax),
		}),
	),
});

/**
 * Creates a new organization.

Only users with an @agency.fund email address can create organizations.
 * @summary Create Organizations
 */
export const createOrganizationsBodyNameMax = 100;

export const createOrganizationsBody = zod.object({
	name: zod.string().max(createOrganizationsBodyNameMax),
});

export const createOrganizationsResponseIdMax = 64;

export const createOrganizationsResponse = zod.object({
	id: zod.string().max(createOrganizationsResponseIdMax),
});

/**
 * Adds a Webhook to an organization.
 * @summary Add Webhook To Organization
 */
export const addWebhookToOrganizationParams = zod.object({
	organization_id: zod.string(),
});

export const addWebhookToOrganizationBodyUrlMax = 500;

export const addWebhookToOrganizationBody = zod.object({
	type: zod.string(),
	url: zod.string().max(addWebhookToOrganizationBodyUrlMax),
});

export const addWebhookToOrganizationResponse = zod.object({
	id: zod.string(),
	type: zod.string(),
	url: zod.string(),
	auth_token: zod.string().or(zod.null()),
});

/**
 * Lists all the webhooks for an organization.
 * @summary List Organization Webhooks
 */
export const listOrganizationWebhooksParams = zod.object({
	organization_id: zod.string(),
});

export const listOrganizationWebhooksResponse = zod.object({
	items: zod.array(
		zod.object({
			id: zod.string(),
			type: zod.string(),
			url: zod.string(),
			auth_token: zod.string().or(zod.null()),
		}),
	),
});

/**
 * Removes a Webhook from an organization.
 * @summary Delete Webhook From Organization
 */
export const deleteWebhookFromOrganizationParams = zod.object({
	organization_id: zod.string(),
	webhook_id: zod.string(),
});

/**
 * Returns the most recent 200 events in an organization.
 * @summary List Organization Events
 */
export const listOrganizationEventsParams = zod.object({
	organization_id: zod.string(),
});

export const listOrganizationEventsResponse = zod.object({
	items: zod.array(
		zod.object({
			id: zod.string(),
			created_at: zod.string().datetime(),
			type: zod.string(),
			summary: zod.string(),
			link: zod.string().or(zod.null()).optional(),
			details: zod.object({}).or(zod.null()),
		}),
	),
});

/**
 * Adds a new member to an organization.

The authenticated user must be part of the organization to add members.
 * @summary Add Member To Organization
 */
export const addMemberToOrganizationParams = zod.object({
	organization_id: zod.string(),
});

export const addMemberToOrganizationBody = zod.object({
	email: zod.string(),
});

/**
 * Removes a member from an organization.

The authenticated user must be part of the organization to remove members.
 * @summary Remove Member From Organization
 */
export const removeMemberFromOrganizationParams = zod.object({
	organization_id: zod.string(),
	user_id: zod.string(),
});

/**
 * Updates an organization's properties.

The authenticated user must be a member of the organization.
Currently only supports updating the organization name.
 * @summary Update Organization
 */
export const updateOrganizationParams = zod.object({
	organization_id: zod.string(),
});

export const updateOrganizationBodyNameMaxOne = 100;

export const updateOrganizationBody = zod.object({
	name: zod
		.string()
		.max(updateOrganizationBodyNameMaxOne)
		.or(zod.null())
		.optional(),
});

export const updateOrganizationResponse = zod.any();

/**
 * Returns detailed information about a specific organization.

The authenticated user must be a member of the organization.
 * @summary Get Organization
 */
export const getOrganizationParams = zod.object({
	organization_id: zod.string(),
});

export const getOrganizationResponseIdMax = 64;
export const getOrganizationResponseNameMax = 100;
export const getOrganizationResponseUsersItemIdMax = 64;
export const getOrganizationResponseUsersItemEmailMax = 64;
export const getOrganizationResponseDatasourcesItemIdMax = 64;
export const getOrganizationResponseDatasourcesItemNameMax = 100;
export const getOrganizationResponseDatasourcesItemOrganizationIdMax = 64;
export const getOrganizationResponseDatasourcesItemOrganizationNameMax = 100;

export const getOrganizationResponse = zod.object({
	id: zod.string().max(getOrganizationResponseIdMax),
	name: zod.string().max(getOrganizationResponseNameMax),
	users: zod.array(
		zod.object({
			id: zod.string().max(getOrganizationResponseUsersItemIdMax),
			email: zod.string().max(getOrganizationResponseUsersItemEmailMax),
		}),
	),
	datasources: zod.array(
		zod.object({
			id: zod.string().max(getOrganizationResponseDatasourcesItemIdMax),
			name: zod.string().max(getOrganizationResponseDatasourcesItemNameMax),
			driver: zod.string(),
			type: zod.string(),
			organization_id: zod
				.string()
				.max(getOrganizationResponseDatasourcesItemOrganizationIdMax),
			organization_name: zod
				.string()
				.max(getOrganizationResponseDatasourcesItemOrganizationNameMax),
		}),
	),
});

/**
 * Returns a list of datasources accessible to the authenticated user for an org.
 * @summary List Organization Datasources
 */
export const listOrganizationDatasourcesParams = zod.object({
	organization_id: zod.string(),
});

export const listOrganizationDatasourcesResponseItemsItemIdMax = 64;
export const listOrganizationDatasourcesResponseItemsItemNameMax = 100;
export const listOrganizationDatasourcesResponseItemsItemOrganizationIdMax = 64;
export const listOrganizationDatasourcesResponseItemsItemOrganizationNameMax = 100;

export const listOrganizationDatasourcesResponse = zod.object({
	items: zod.array(
		zod.object({
			id: zod.string().max(listOrganizationDatasourcesResponseItemsItemIdMax),
			name: zod
				.string()
				.max(listOrganizationDatasourcesResponseItemsItemNameMax),
			driver: zod.string(),
			type: zod.string(),
			organization_id: zod
				.string()
				.max(listOrganizationDatasourcesResponseItemsItemOrganizationIdMax),
			organization_name: zod
				.string()
				.max(listOrganizationDatasourcesResponseItemsItemOrganizationNameMax),
		}),
	),
});

/**
 * Creates a new datasource for the specified organization.
 * @summary Create Datasource
 */
export const createDatasourceBodyOrganizationIdMax = 64;
export const createDatasourceBodyDwhPortDefault = 5432;
export const createDatasourceBodyDwhPortMin = 1024;

export const createDatasourceBodyDwhPortMax = 65535;
export const createDatasourceBodyDwhProjectIdMin = 6;

export const createDatasourceBodyDwhProjectIdMax = 30;

export const createDatasourceBodyDwhProjectIdRegExp = new RegExp(
	"^[a-z0-9-]+$",
);
export const createDatasourceBodyDwhDatasetIdMax = 1024;

export const createDatasourceBodyDwhDatasetIdRegExp = new RegExp(
	"^[a-zA-Z0-9_]+$",
);
export const createDatasourceBodyDwhCredentialsContentBase64Min = 4;

export const createDatasourceBodyDwhCredentialsContentBase64Max = 8000;

export const createDatasourceBody = zod.object({
	organization_id: zod.string().max(createDatasourceBodyOrganizationIdMax),
	name: zod.string(),
	dwh: zod.discriminatedUnion("driver", [
		zod.object({
			driver: zod.enum(["postgresql+psycopg", "postgresql+psycopg2"]),
			host: zod.string(),
			port: zod
				.number()
				.min(createDatasourceBodyDwhPortMin)
				.max(createDatasourceBodyDwhPortMax)
				.default(createDatasourceBodyDwhPortDefault),
			user: zod.string(),
			password: zod.string(),
			dbname: zod.string(),
			sslmode: zod.enum(["disable", "require", "verify-ca", "verify-full"]),
			search_path: zod.string().or(zod.null()).optional(),
		}),
		zod.object({
			driver: zod.enum(["bigquery"]),
			project_id: zod
				.string()
				.min(createDatasourceBodyDwhProjectIdMin)
				.max(createDatasourceBodyDwhProjectIdMax)
				.regex(createDatasourceBodyDwhProjectIdRegExp),
			dataset_id: zod
				.string()
				.min(1)
				.max(createDatasourceBodyDwhDatasetIdMax)
				.regex(createDatasourceBodyDwhDatasetIdRegExp),
			credentials: zod.discriminatedUnion("type", [
				zod.object({
					type: zod.enum(["serviceaccountinfo"]),
					content_base64: zod
						.string()
						.min(createDatasourceBodyDwhCredentialsContentBase64Min)
						.max(createDatasourceBodyDwhCredentialsContentBase64Max),
				}),
				zod.object({
					type: zod.enum(["serviceaccountfile"]),
					path: zod.string(),
				}),
			]),
		}),
	]),
});

export const createDatasourceResponseIdMax = 64;

export const createDatasourceResponse = zod.object({
	id: zod.string().max(createDatasourceResponseIdMax),
});

/**
 * @summary Update Datasource
 */
export const updateDatasourceParams = zod.object({
	datasource_id: zod.string(),
});

export const updateDatasourceBodyNameMaxOne = 100;
export const updateDatasourceBodyDwhPortDefault = 5432;
export const updateDatasourceBodyDwhPortMin = 1024;

export const updateDatasourceBodyDwhPortMax = 65535;
export const updateDatasourceBodyDwhProjectIdMin = 6;

export const updateDatasourceBodyDwhProjectIdMax = 30;

export const updateDatasourceBodyDwhProjectIdRegExp = new RegExp(
	"^[a-z0-9-]+$",
);
export const updateDatasourceBodyDwhDatasetIdMax = 1024;

export const updateDatasourceBodyDwhDatasetIdRegExp = new RegExp(
	"^[a-zA-Z0-9_]+$",
);
export const updateDatasourceBodyDwhCredentialsContentBase64Min = 4;

export const updateDatasourceBodyDwhCredentialsContentBase64Max = 8000;

export const updateDatasourceBody = zod.object({
	name: zod
		.string()
		.max(updateDatasourceBodyNameMaxOne)
		.or(zod.null())
		.optional(),
	dwh: zod
		.discriminatedUnion("driver", [
			zod.object({
				driver: zod.enum(["postgresql+psycopg", "postgresql+psycopg2"]),
				host: zod.string(),
				port: zod
					.number()
					.min(updateDatasourceBodyDwhPortMin)
					.max(updateDatasourceBodyDwhPortMax)
					.default(updateDatasourceBodyDwhPortDefault),
				user: zod.string(),
				password: zod.string(),
				dbname: zod.string(),
				sslmode: zod.enum(["disable", "require", "verify-ca", "verify-full"]),
				search_path: zod.string().or(zod.null()).optional(),
			}),
			zod.object({
				driver: zod.enum(["bigquery"]),
				project_id: zod
					.string()
					.min(updateDatasourceBodyDwhProjectIdMin)
					.max(updateDatasourceBodyDwhProjectIdMax)
					.regex(updateDatasourceBodyDwhProjectIdRegExp),
				dataset_id: zod
					.string()
					.min(1)
					.max(updateDatasourceBodyDwhDatasetIdMax)
					.regex(updateDatasourceBodyDwhDatasetIdRegExp),
				credentials: zod.discriminatedUnion("type", [
					zod.object({
						type: zod.enum(["serviceaccountinfo"]),
						content_base64: zod
							.string()
							.min(updateDatasourceBodyDwhCredentialsContentBase64Min)
							.max(updateDatasourceBodyDwhCredentialsContentBase64Max),
					}),
					zod.object({
						type: zod.enum(["serviceaccountfile"]),
						path: zod.string(),
					}),
				]),
			}),
		])
		.or(zod.null())
		.optional(),
});

export const updateDatasourceResponse = zod.any();

/**
 * Returns detailed information about a specific datasource.
 * @summary Get Datasource
 */
export const getDatasourceParams = zod.object({
	datasource_id: zod.string(),
});

export const getDatasourceResponseIdMax = 64;
export const getDatasourceResponseNameMax = 100;
export const getDatasourceResponseConfigDwhPortDefault = 5432;
export const getDatasourceResponseConfigDwhPortMin = 1024;

export const getDatasourceResponseConfigDwhPortMax = 65535;
export const getDatasourceResponseConfigDwhProjectIdMin = 6;

export const getDatasourceResponseConfigDwhProjectIdMax = 30;

export const getDatasourceResponseConfigDwhProjectIdRegExp = new RegExp(
	"^[a-z0-9-]+$",
);
export const getDatasourceResponseConfigDwhDatasetIdMax = 1024;

export const getDatasourceResponseConfigDwhDatasetIdRegExp = new RegExp(
	"^[a-zA-Z0-9_]+$",
);
export const getDatasourceResponseConfigDwhCredentialsContentBase64Min = 4;

export const getDatasourceResponseConfigDwhCredentialsContentBase64Max = 8000;
export const getDatasourceResponseOrganizationIdMax = 64;
export const getDatasourceResponseOrganizationNameMax = 100;

export const getDatasourceResponse = zod.object({
	id: zod.string().max(getDatasourceResponseIdMax),
	name: zod.string().max(getDatasourceResponseNameMax),
	config: zod.object({
		participants: zod.array(
			zod.discriminatedUnion("type", [
				zod.object({
					participant_type: zod.string(),
					type: zod.enum(["sheet"]),
					table_name: zod.string(),
					sheet: zod.object({
						url: zod.string(),
						worksheet: zod.string(),
					}),
				}),
				zod.object({
					table_name: zod.string(),
					fields: zod.array(
						zod.object({
							field_name: zod.string(),
							data_type: zod.enum([
								"boolean",
								"character varying",
								"uuid",
								"date",
								"integer",
								"double precision",
								"numeric",
								"timestamp without time zone",
								"bigint",
								"jsonb (unsupported)",
								"json (unsupported)",
								"unsupported",
							]),
							description: zod.string(),
							is_unique_id: zod.boolean(),
							is_strata: zod.boolean(),
							is_filter: zod.boolean(),
							is_metric: zod.boolean(),
							extra: zod
								.record(zod.string(), zod.string())
								.or(zod.null())
								.optional(),
						}),
					),
					participant_type: zod.string(),
					type: zod.enum(["schema"]),
				}),
			]),
		),
		webhook_config: zod
			.object({
				actions: zod.object({
					commit: zod
						.object({
							method: zod.enum(["GET", "POST", "PUT", "PATCH", "DELETE"]),
							url: zod.string(),
						})
						.or(zod.null())
						.optional(),
					assignment_file: zod
						.object({
							method: zod.enum(["GET", "POST", "PUT", "PATCH", "DELETE"]),
							url: zod.string(),
						})
						.or(zod.null())
						.optional(),
					update_timestamps: zod
						.object({
							method: zod.enum(["GET", "POST", "PUT", "PATCH", "DELETE"]),
							url: zod.string(),
						})
						.or(zod.null())
						.optional(),
					update_description: zod
						.object({
							method: zod.enum(["GET", "POST", "PUT", "PATCH", "DELETE"]),
							url: zod.string(),
						})
						.or(zod.null())
						.optional(),
				}),
				common_headers: zod.object({
					authorization: zod.string().or(zod.null()),
				}),
			})
			.or(zod.null())
			.optional(),
		type: zod.string(),
		dwh: zod.discriminatedUnion("driver", [
			zod.object({
				driver: zod.enum(["postgresql+psycopg", "postgresql+psycopg2"]),
				host: zod.string(),
				port: zod
					.number()
					.min(getDatasourceResponseConfigDwhPortMin)
					.max(getDatasourceResponseConfigDwhPortMax)
					.default(getDatasourceResponseConfigDwhPortDefault),
				user: zod.string(),
				password: zod.string(),
				dbname: zod.string(),
				sslmode: zod.enum(["disable", "require", "verify-ca", "verify-full"]),
				search_path: zod.string().or(zod.null()).optional(),
			}),
			zod.object({
				driver: zod.enum(["bigquery"]),
				project_id: zod
					.string()
					.min(getDatasourceResponseConfigDwhProjectIdMin)
					.max(getDatasourceResponseConfigDwhProjectIdMax)
					.regex(getDatasourceResponseConfigDwhProjectIdRegExp),
				dataset_id: zod
					.string()
					.min(1)
					.max(getDatasourceResponseConfigDwhDatasetIdMax)
					.regex(getDatasourceResponseConfigDwhDatasetIdRegExp),
				credentials: zod.discriminatedUnion("type", [
					zod.object({
						type: zod.enum(["serviceaccountinfo"]),
						content_base64: zod
							.string()
							.min(getDatasourceResponseConfigDwhCredentialsContentBase64Min)
							.max(getDatasourceResponseConfigDwhCredentialsContentBase64Max),
					}),
					zod.object({
						type: zod.enum(["serviceaccountfile"]),
						path: zod.string(),
					}),
				]),
			}),
		]),
	}),
	organization_id: zod.string().max(getDatasourceResponseOrganizationIdMax),
	organization_name: zod.string().max(getDatasourceResponseOrganizationNameMax),
});

/**
 * Deletes a datasource.

The user must be a member of the organization that owns the datasource.
 * @summary Delete Datasource
 */
export const deleteDatasourceParams = zod.object({
	datasource_id: zod.string(),
});

/**
 * Verifies connectivity to a datasource and returns a list of readable tables.
 * @summary Inspect Datasource
 */
export const inspectDatasourceParams = zod.object({
	datasource_id: zod.string(),
});

export const inspectDatasourceQueryRefreshDefault = false;

export const inspectDatasourceQueryParams = zod.object({
	refresh: zod.boolean().optional(),
});

export const inspectDatasourceResponse = zod.object({
	tables: zod.array(zod.string()),
});

/**
 * Inspects a single table in a datasource and returns a summary of its fields.
 * @summary Inspect Table In Datasource
 */
export const inspectTableInDatasourceParams = zod.object({
	datasource_id: zod.string(),
	table_name: zod.string(),
});

export const inspectTableInDatasourceQueryRefreshDefault = false;

export const inspectTableInDatasourceQueryParams = zod.object({
	refresh: zod.boolean().optional(),
});

export const inspectTableInDatasourceResponseFieldsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const inspectTableInDatasourceResponseFieldsItemDescriptionMax = 2000;

export const inspectTableInDatasourceResponse = zod.object({
	detected_unique_id_fields: zod.array(zod.string()),
	fields: zod.array(
		zod.object({
			field_name: zod
				.string()
				.regex(inspectTableInDatasourceResponseFieldsItemFieldNameRegExp),
			data_type: zod.enum([
				"boolean",
				"character varying",
				"uuid",
				"date",
				"integer",
				"double precision",
				"numeric",
				"timestamp without time zone",
				"bigint",
				"jsonb (unsupported)",
				"json (unsupported)",
				"unsupported",
			]),
			description: zod
				.string()
				.max(inspectTableInDatasourceResponseFieldsItemDescriptionMax),
		}),
	),
});

/**
 * @summary List Participant Types
 */
export const listParticipantTypesParams = zod.object({
	datasource_id: zod.string(),
});

export const listParticipantTypesResponse = zod.object({
	items: zod.array(
		zod.discriminatedUnion("type", [
			zod.object({
				participant_type: zod.string(),
				type: zod.enum(["sheet"]),
				table_name: zod.string(),
				sheet: zod.object({
					url: zod.string(),
					worksheet: zod.string(),
				}),
			}),
			zod.object({
				table_name: zod.string(),
				fields: zod.array(
					zod.object({
						field_name: zod.string(),
						data_type: zod.enum([
							"boolean",
							"character varying",
							"uuid",
							"date",
							"integer",
							"double precision",
							"numeric",
							"timestamp without time zone",
							"bigint",
							"jsonb (unsupported)",
							"json (unsupported)",
							"unsupported",
						]),
						description: zod.string(),
						is_unique_id: zod.boolean(),
						is_strata: zod.boolean(),
						is_filter: zod.boolean(),
						is_metric: zod.boolean(),
						extra: zod
							.record(zod.string(), zod.string())
							.or(zod.null())
							.optional(),
					}),
				),
				participant_type: zod.string(),
				type: zod.enum(["schema"]),
			}),
		]),
	),
});

/**
 * @summary Create Participant Type
 */
export const createParticipantTypeParams = zod.object({
	datasource_id: zod.string(),
});

export const createParticipantTypeBodyParticipantTypeMax = 100;

export const createParticipantTypeBody = zod.object({
	participant_type: zod
		.string()
		.max(createParticipantTypeBodyParticipantTypeMax),
	schema_def: zod.object({
		table_name: zod.string(),
		fields: zod.array(
			zod.object({
				field_name: zod.string(),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				description: zod.string(),
				is_unique_id: zod.boolean(),
				is_strata: zod.boolean(),
				is_filter: zod.boolean(),
				is_metric: zod.boolean(),
				extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
			}),
		),
	}),
});

export const createParticipantTypeResponseParticipantTypeMax = 100;

export const createParticipantTypeResponse = zod.object({
	participant_type: zod
		.string()
		.max(createParticipantTypeResponseParticipantTypeMax),
	schema_def: zod.object({
		table_name: zod.string(),
		fields: zod.array(
			zod.object({
				field_name: zod.string(),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				description: zod.string(),
				is_unique_id: zod.boolean(),
				is_strata: zod.boolean(),
				is_filter: zod.boolean(),
				is_metric: zod.boolean(),
				extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
			}),
		),
	}),
});

/**
 * Returns filter, strata, and metric field metadata for a participant type, including exemplars for filter fields.
 * @summary Inspect Participant Types
 */
export const inspectParticipantTypesParams = zod.object({
	datasource_id: zod.string(),
	participant_id: zod.string(),
});

export const inspectParticipantTypesQueryRefreshDefault = false;

export const inspectParticipantTypesQueryParams = zod.object({
	refresh: zod.boolean().optional(),
});

export const inspectParticipantTypesResponseFiltersItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const inspectParticipantTypesResponseFiltersItemRelationsMax = 20;
export const inspectParticipantTypesResponseFiltersItemDescriptionMax = 2000;
export const inspectParticipantTypesResponseFiltersItemFieldNameRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const inspectParticipantTypesResponseFiltersItemRelationsMaxOne = 20;
export const inspectParticipantTypesResponseFiltersItemDescriptionMaxOne = 2000;
export const inspectParticipantTypesResponseMetricsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const inspectParticipantTypesResponseMetricsItemDescriptionMax = 2000;
export const inspectParticipantTypesResponseStrataItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const inspectParticipantTypesResponseStrataItemDescriptionMax = 2000;

export const inspectParticipantTypesResponse = zod.object({
	filters: zod.array(
		zod
			.object({
				field_name: zod
					.string()
					.regex(inspectParticipantTypesResponseFiltersItemFieldNameRegExp),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				relations: zod
					.array(zod.enum(["includes", "excludes", "between"]))
					.min(1)
					.max(inspectParticipantTypesResponseFiltersItemRelationsMax),
				description: zod
					.string()
					.max(inspectParticipantTypesResponseFiltersItemDescriptionMax),
				min: zod
					.string()
					.datetime()
					.or(zod.string().date())
					.or(zod.number())
					.or(zod.number())
					.or(zod.null()),
				max: zod
					.string()
					.datetime()
					.or(zod.string().date())
					.or(zod.number())
					.or(zod.number())
					.or(zod.null()),
			})
			.or(
				zod.object({
					field_name: zod
						.string()
						.regex(
							inspectParticipantTypesResponseFiltersItemFieldNameRegExpOne,
						),
					data_type: zod.enum([
						"boolean",
						"character varying",
						"uuid",
						"date",
						"integer",
						"double precision",
						"numeric",
						"timestamp without time zone",
						"bigint",
						"jsonb (unsupported)",
						"json (unsupported)",
						"unsupported",
					]),
					relations: zod
						.array(zod.enum(["includes", "excludes", "between"]))
						.min(1)
						.max(inspectParticipantTypesResponseFiltersItemRelationsMaxOne),
					description: zod
						.string()
						.max(inspectParticipantTypesResponseFiltersItemDescriptionMaxOne),
					distinct_values: zod.array(zod.string()).or(zod.null()),
				}),
			),
	),
	metrics: zod.array(
		zod.object({
			field_name: zod
				.string()
				.regex(inspectParticipantTypesResponseMetricsItemFieldNameRegExp),
			data_type: zod.enum([
				"boolean",
				"character varying",
				"uuid",
				"date",
				"integer",
				"double precision",
				"numeric",
				"timestamp without time zone",
				"bigint",
				"jsonb (unsupported)",
				"json (unsupported)",
				"unsupported",
			]),
			description: zod
				.string()
				.max(inspectParticipantTypesResponseMetricsItemDescriptionMax),
		}),
	),
	strata: zod.array(
		zod.object({
			data_type: zod.enum([
				"boolean",
				"character varying",
				"uuid",
				"date",
				"integer",
				"double precision",
				"numeric",
				"timestamp without time zone",
				"bigint",
				"jsonb (unsupported)",
				"json (unsupported)",
				"unsupported",
			]),
			field_name: zod
				.string()
				.regex(inspectParticipantTypesResponseStrataItemFieldNameRegExp),
			description: zod
				.string()
				.max(inspectParticipantTypesResponseStrataItemDescriptionMax),
			extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
		}),
	),
});

/**
 * @summary Get Participant Types
 */
export const getParticipantTypesParams = zod.object({
	datasource_id: zod.string(),
	participant_id: zod.string(),
});

export const getParticipantTypesResponse = zod.discriminatedUnion("type", [
	zod.object({
		participant_type: zod.string(),
		type: zod.enum(["sheet"]),
		table_name: zod.string(),
		sheet: zod.object({
			url: zod.string(),
			worksheet: zod.string(),
		}),
	}),
	zod.object({
		table_name: zod.string(),
		fields: zod.array(
			zod.object({
				field_name: zod.string(),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				description: zod.string(),
				is_unique_id: zod.boolean(),
				is_strata: zod.boolean(),
				is_filter: zod.boolean(),
				is_metric: zod.boolean(),
				extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
			}),
		),
		participant_type: zod.string(),
		type: zod.enum(["schema"]),
	}),
]);

/**
 * @summary Update Participant Type
 */
export const updateParticipantTypeParams = zod.object({
	datasource_id: zod.string(),
	participant_id: zod.string(),
});

export const updateParticipantTypeBodyParticipantTypeMaxOne = 100;
export const updateParticipantTypeBodyTableNameRegExpOne = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const updateParticipantTypeBodyFieldsMaxOne = 150;

export const updateParticipantTypeBody = zod.object({
	participant_type: zod
		.string()
		.max(updateParticipantTypeBodyParticipantTypeMaxOne)
		.or(zod.null())
		.optional(),
	table_name: zod
		.string()
		.regex(updateParticipantTypeBodyTableNameRegExpOne)
		.or(zod.null())
		.optional(),
	fields: zod
		.array(
			zod.object({
				field_name: zod.string(),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				description: zod.string(),
				is_unique_id: zod.boolean(),
				is_strata: zod.boolean(),
				is_filter: zod.boolean(),
				is_metric: zod.boolean(),
				extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
			}),
		)
		.max(updateParticipantTypeBodyFieldsMaxOne)
		.or(zod.null())
		.optional(),
});

export const updateParticipantTypeResponseParticipantTypeMax = 100;
export const updateParticipantTypeResponseTableNameRegExpOne = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const updateParticipantTypeResponseFieldsMaxOne = 150;

export const updateParticipantTypeResponse = zod.object({
	participant_type: zod
		.string()
		.max(updateParticipantTypeResponseParticipantTypeMax),
	table_name: zod
		.string()
		.regex(updateParticipantTypeResponseTableNameRegExpOne)
		.or(zod.null())
		.optional(),
	fields: zod
		.array(
			zod.object({
				field_name: zod.string(),
				data_type: zod.enum([
					"boolean",
					"character varying",
					"uuid",
					"date",
					"integer",
					"double precision",
					"numeric",
					"timestamp without time zone",
					"bigint",
					"jsonb (unsupported)",
					"json (unsupported)",
					"unsupported",
				]),
				description: zod.string(),
				is_unique_id: zod.boolean(),
				is_strata: zod.boolean(),
				is_filter: zod.boolean(),
				is_metric: zod.boolean(),
				extra: zod.record(zod.string(), zod.string()).or(zod.null()).optional(),
			}),
		)
		.max(updateParticipantTypeResponseFieldsMaxOne)
		.or(zod.null())
		.optional(),
});

/**
 * @summary Delete Participant
 */
export const deleteParticipantParams = zod.object({
	datasource_id: zod.string(),
	participant_id: zod.string(),
});

/**
 * Returns API keys that have access to the datasource.
 * @summary List Api Keys
 */
export const listApiKeysParams = zod.object({
	datasource_id: zod.string(),
});

export const listApiKeysResponseItemsItemIdMax = 64;
export const listApiKeysResponseItemsItemDatasourceIdMax = 64;
export const listApiKeysResponseItemsItemOrganizationIdMax = 64;
export const listApiKeysResponseItemsItemOrganizationNameMax = 100;

export const listApiKeysResponse = zod.object({
	items: zod.array(
		zod.object({
			id: zod.string().max(listApiKeysResponseItemsItemIdMax),
			datasource_id: zod
				.string()
				.max(listApiKeysResponseItemsItemDatasourceIdMax),
			organization_id: zod
				.string()
				.max(listApiKeysResponseItemsItemOrganizationIdMax),
			organization_name: zod
				.string()
				.max(listApiKeysResponseItemsItemOrganizationNameMax),
		}),
	),
});

/**
 * Creates an API key for the specified datasource.

The user must belong to the organization that owns the requested datasource.
 * @summary Create Api Key
 */
export const createApiKeyParams = zod.object({
	datasource_id: zod.string(),
});

export const createApiKeyResponseIdMax = 64;

export const createApiKeyResponse = zod.object({
	id: zod.string().max(createApiKeyResponseIdMax),
	datasource_id: zod.string(),
	key: zod.string(),
});

/**
 * Deletes the specified API key.
 * @summary Delete Api Key
 */
export const deleteApiKeyParams = zod.object({
	datasource_id: zod.string(),
	api_key_id: zod.string(),
});

/**
 * @summary Create Experiment With Assignment
 */
export const createExperimentWithAssignmentParams = zod.object({
	datasource_id: zod.string(),
});

export const createExperimentWithAssignmentQueryStratifyOnMetricsDefault = true;

export const createExperimentWithAssignmentQueryParams = zod.object({
	chosen_n: zod.number(),
	stratify_on_metrics: zod
		.boolean()
		.default(createExperimentWithAssignmentQueryStratifyOnMetricsDefault),
});

export const createExperimentWithAssignmentBodyDesignSpecExperimentNameMax = 100;
export const createExperimentWithAssignmentBodyDesignSpecDescriptionMax = 2000;
export const createExperimentWithAssignmentBodyDesignSpecArmsItemArmNameMax = 100;
export const createExperimentWithAssignmentBodyDesignSpecArmsItemArmDescriptionMaxOne = 2000;
export const createExperimentWithAssignmentBodyDesignSpecArmsMin = 2;

export const createExperimentWithAssignmentBodyDesignSpecArmsMax = 10;
export const createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesItemRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesMax = 150;
export const createExperimentWithAssignmentBodyDesignSpecMetricsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyDesignSpecMetricsMax = 150;
export const createExperimentWithAssignmentBodyDesignSpecPowerDefault = 0.8;
export const createExperimentWithAssignmentBodyDesignSpecPowerMin = 0;

export const createExperimentWithAssignmentBodyDesignSpecPowerMax = 1;
export const createExperimentWithAssignmentBodyDesignSpecAlphaDefault = 0.05;
export const createExperimentWithAssignmentBodyDesignSpecAlphaMin = 0;

export const createExperimentWithAssignmentBodyDesignSpecAlphaMax = 1;
export const createExperimentWithAssignmentBodyDesignSpecFstatThreshDefault = 0.6;
export const createExperimentWithAssignmentBodyDesignSpecFstatThreshMin = 0;

export const createExperimentWithAssignmentBodyDesignSpecFstatThreshMax = 1;
export const createExperimentWithAssignmentBodyDesignSpecExperimentNameMaxOne = 100;
export const createExperimentWithAssignmentBodyDesignSpecDescriptionMaxOne = 2000;
export const createExperimentWithAssignmentBodyDesignSpecArmsItemArmNameMaxOne = 100;
export const createExperimentWithAssignmentBodyDesignSpecArmsItemArmDescriptionMaxFour = 2000;
export const createExperimentWithAssignmentBodyDesignSpecArmsMinOne = 2;

export const createExperimentWithAssignmentBodyDesignSpecArmsMaxOne = 10;
export const createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesItemRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesMaxOne = 150;
export const createExperimentWithAssignmentBodyDesignSpecMetricsItemFieldNameRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyDesignSpecMetricsMaxOne = 150;
export const createExperimentWithAssignmentBodyDesignSpecPowerDefaultOne = 0.8;
export const createExperimentWithAssignmentBodyDesignSpecPowerMinOne = 0;

export const createExperimentWithAssignmentBodyDesignSpecPowerMaxOne = 1;
export const createExperimentWithAssignmentBodyDesignSpecAlphaDefaultOne = 0.05;
export const createExperimentWithAssignmentBodyDesignSpecAlphaMinOne = 0;

export const createExperimentWithAssignmentBodyDesignSpecAlphaMaxOne = 1;
export const createExperimentWithAssignmentBodyDesignSpecFstatThreshDefaultOne = 0.6;
export const createExperimentWithAssignmentBodyDesignSpecFstatThreshMinOne = 0;

export const createExperimentWithAssignmentBodyDesignSpecFstatThreshMaxOne = 1;
export const createExperimentWithAssignmentBodyAudienceSpecParticipantTypeMax = 100;
export const createExperimentWithAssignmentBodyAudienceSpecFiltersItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyAudienceSpecFiltersMax = 20;
export const createExperimentWithAssignmentBodyPowerAnalysesAnalysesItemMetricSpecFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentBodyPowerAnalysesAnalysesMax = 150;

export const createExperimentWithAssignmentBody = zod.object({
	design_spec: zod.discriminatedUnion("experiment_type", [
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["preassigned"]),
			experiment_name: zod
				.string()
				.max(createExperimentWithAssignmentBodyDesignSpecExperimentNameMax),
			description: zod
				.string()
				.max(createExperimentWithAssignmentBodyDesignSpecDescriptionMax),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(
								createExperimentWithAssignmentBodyDesignSpecArmsItemArmNameMax,
							),
						arm_description: zod
							.string()
							.max(
								createExperimentWithAssignmentBodyDesignSpecArmsItemArmDescriptionMaxOne,
							)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(createExperimentWithAssignmentBodyDesignSpecArmsMin)
				.max(createExperimentWithAssignmentBodyDesignSpecArmsMax),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(
							createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesItemRegExp,
						),
				)
				.max(createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesMax),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								createExperimentWithAssignmentBodyDesignSpecMetricsItemFieldNameRegExp,
							),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(createExperimentWithAssignmentBodyDesignSpecMetricsMax),
			power: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecPowerMin)
				.max(createExperimentWithAssignmentBodyDesignSpecPowerMax)
				.default(createExperimentWithAssignmentBodyDesignSpecPowerDefault),
			alpha: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecAlphaMin)
				.max(createExperimentWithAssignmentBodyDesignSpecAlphaMax)
				.default(createExperimentWithAssignmentBodyDesignSpecAlphaDefault),
			fstat_thresh: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecFstatThreshMin)
				.max(createExperimentWithAssignmentBodyDesignSpecFstatThreshMax)
				.default(
					createExperimentWithAssignmentBodyDesignSpecFstatThreshDefault,
				),
		}),
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["online"]),
			experiment_name: zod
				.string()
				.max(createExperimentWithAssignmentBodyDesignSpecExperimentNameMaxOne),
			description: zod
				.string()
				.max(createExperimentWithAssignmentBodyDesignSpecDescriptionMaxOne),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(
								createExperimentWithAssignmentBodyDesignSpecArmsItemArmNameMaxOne,
							),
						arm_description: zod
							.string()
							.max(
								createExperimentWithAssignmentBodyDesignSpecArmsItemArmDescriptionMaxFour,
							)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(createExperimentWithAssignmentBodyDesignSpecArmsMinOne)
				.max(createExperimentWithAssignmentBodyDesignSpecArmsMaxOne),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(
							createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesItemRegExpOne,
						),
				)
				.max(
					createExperimentWithAssignmentBodyDesignSpecStrataFieldNamesMaxOne,
				),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								createExperimentWithAssignmentBodyDesignSpecMetricsItemFieldNameRegExpOne,
							),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(createExperimentWithAssignmentBodyDesignSpecMetricsMaxOne),
			power: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecPowerMinOne)
				.max(createExperimentWithAssignmentBodyDesignSpecPowerMaxOne)
				.default(createExperimentWithAssignmentBodyDesignSpecPowerDefaultOne),
			alpha: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecAlphaMinOne)
				.max(createExperimentWithAssignmentBodyDesignSpecAlphaMaxOne)
				.default(createExperimentWithAssignmentBodyDesignSpecAlphaDefaultOne),
			fstat_thresh: zod
				.number()
				.min(createExperimentWithAssignmentBodyDesignSpecFstatThreshMinOne)
				.max(createExperimentWithAssignmentBodyDesignSpecFstatThreshMaxOne)
				.default(
					createExperimentWithAssignmentBodyDesignSpecFstatThreshDefaultOne,
				),
		}),
	]),
	audience_spec: zod.object({
		participant_type: zod
			.string()
			.max(createExperimentWithAssignmentBodyAudienceSpecParticipantTypeMax),
		filters: zod
			.array(
				zod.object({
					field_name: zod
						.string()
						.regex(
							createExperimentWithAssignmentBodyAudienceSpecFiltersItemFieldNameRegExp,
						),
					relation: zod.enum(["includes", "excludes", "between"]),
					value: zod
						.array(zod.number().or(zod.null()))
						.or(zod.array(zod.number().or(zod.null())))
						.or(zod.array(zod.string().or(zod.null())))
						.or(zod.array(zod.boolean().or(zod.null()))),
				}),
			)
			.max(createExperimentWithAssignmentBodyAudienceSpecFiltersMax),
	}),
	power_analyses: zod
		.object({
			analyses: zod
				.array(
					zod.object({
						metric_spec: zod.object({
							field_name: zod
								.string()
								.regex(
									createExperimentWithAssignmentBodyPowerAnalysesAnalysesItemMetricSpecFieldNameRegExp,
								),
							metric_pct_change: zod.number().or(zod.null()).optional(),
							metric_target: zod.number().or(zod.null()).optional(),
							metric_type: zod
								.enum(["binary", "numeric"])
								.or(zod.null())
								.optional(),
							metric_baseline: zod.number().or(zod.null()).optional(),
							metric_stddev: zod.number().or(zod.null()).optional(),
							available_nonnull_n: zod.number().or(zod.null()).optional(),
							available_n: zod.number().or(zod.null()).optional(),
						}),
						target_n: zod.number().or(zod.null()).optional(),
						sufficient_n: zod.boolean().or(zod.null()).optional(),
						target_possible: zod.number().or(zod.null()).optional(),
						pct_change_possible: zod.number().or(zod.null()).optional(),
						msg: zod
							.object({
								type: zod.enum([
									"sufficient",
									"insufficient",
									"no baseline",
									"no available n",
									"zero effect size",
								]),
								msg: zod.string(),
								source_msg: zod.string(),
								values: zod
									.record(zod.string(), zod.number().or(zod.number()))
									.or(zod.null())
									.optional(),
							})
							.or(zod.null())
							.optional(),
					}),
				)
				.max(createExperimentWithAssignmentBodyPowerAnalysesAnalysesMax),
		})
		.or(zod.null())
		.optional(),
});

export const createExperimentWithAssignmentResponseDesignSpecExperimentNameMax = 100;
export const createExperimentWithAssignmentResponseDesignSpecDescriptionMax = 2000;
export const createExperimentWithAssignmentResponseDesignSpecArmsItemArmNameMax = 100;
export const createExperimentWithAssignmentResponseDesignSpecArmsItemArmDescriptionMaxOne = 2000;
export const createExperimentWithAssignmentResponseDesignSpecArmsMin = 2;

export const createExperimentWithAssignmentResponseDesignSpecArmsMax = 10;
export const createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesItemRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesMax = 150;
export const createExperimentWithAssignmentResponseDesignSpecMetricsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponseDesignSpecMetricsMax = 150;
export const createExperimentWithAssignmentResponseDesignSpecPowerDefault = 0.8;
export const createExperimentWithAssignmentResponseDesignSpecPowerMin = 0;

export const createExperimentWithAssignmentResponseDesignSpecPowerMax = 1;
export const createExperimentWithAssignmentResponseDesignSpecAlphaDefault = 0.05;
export const createExperimentWithAssignmentResponseDesignSpecAlphaMin = 0;

export const createExperimentWithAssignmentResponseDesignSpecAlphaMax = 1;
export const createExperimentWithAssignmentResponseDesignSpecFstatThreshDefault = 0.6;
export const createExperimentWithAssignmentResponseDesignSpecFstatThreshMin = 0;

export const createExperimentWithAssignmentResponseDesignSpecFstatThreshMax = 1;
export const createExperimentWithAssignmentResponseDesignSpecExperimentNameMaxOne = 100;
export const createExperimentWithAssignmentResponseDesignSpecDescriptionMaxOne = 2000;
export const createExperimentWithAssignmentResponseDesignSpecArmsItemArmNameMaxOne = 100;
export const createExperimentWithAssignmentResponseDesignSpecArmsItemArmDescriptionMaxFour = 2000;
export const createExperimentWithAssignmentResponseDesignSpecArmsMinOne = 2;

export const createExperimentWithAssignmentResponseDesignSpecArmsMaxOne = 10;
export const createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesItemRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesMaxOne = 150;
export const createExperimentWithAssignmentResponseDesignSpecMetricsItemFieldNameRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponseDesignSpecMetricsMaxOne = 150;
export const createExperimentWithAssignmentResponseDesignSpecPowerDefaultOne = 0.8;
export const createExperimentWithAssignmentResponseDesignSpecPowerMinOne = 0;

export const createExperimentWithAssignmentResponseDesignSpecPowerMaxOne = 1;
export const createExperimentWithAssignmentResponseDesignSpecAlphaDefaultOne = 0.05;
export const createExperimentWithAssignmentResponseDesignSpecAlphaMinOne = 0;

export const createExperimentWithAssignmentResponseDesignSpecAlphaMaxOne = 1;
export const createExperimentWithAssignmentResponseDesignSpecFstatThreshDefaultOne = 0.6;
export const createExperimentWithAssignmentResponseDesignSpecFstatThreshMinOne = 0;

export const createExperimentWithAssignmentResponseDesignSpecFstatThreshMaxOne = 1;
export const createExperimentWithAssignmentResponseAudienceSpecParticipantTypeMax = 100;
export const createExperimentWithAssignmentResponseAudienceSpecFiltersItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponseAudienceSpecFiltersMax = 20;
export const createExperimentWithAssignmentResponsePowerAnalysesAnalysesItemMetricSpecFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const createExperimentWithAssignmentResponsePowerAnalysesAnalysesMax = 150;
export const createExperimentWithAssignmentResponseAssignSummaryArmSizesItemArmArmNameMax = 100;
export const createExperimentWithAssignmentResponseAssignSummaryArmSizesItemArmArmDescriptionMaxOne = 2000;
export const createExperimentWithAssignmentResponseAssignSummaryArmSizesItemSizeDefault = 0;
export const createExperimentWithAssignmentResponseAssignSummaryArmSizesMaxOne = 10;

export const createExperimentWithAssignmentResponse = zod.object({
	datasource_id: zod.string(),
	state: zod.enum([
		"designing",
		"assigned",
		"abandoned",
		"committed",
		"aborted",
	]),
	design_spec: zod.discriminatedUnion("experiment_type", [
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["preassigned"]),
			experiment_name: zod
				.string()
				.max(createExperimentWithAssignmentResponseDesignSpecExperimentNameMax),
			description: zod
				.string()
				.max(createExperimentWithAssignmentResponseDesignSpecDescriptionMax),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseDesignSpecArmsItemArmNameMax,
							),
						arm_description: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseDesignSpecArmsItemArmDescriptionMaxOne,
							)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(createExperimentWithAssignmentResponseDesignSpecArmsMin)
				.max(createExperimentWithAssignmentResponseDesignSpecArmsMax),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(
							createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesItemRegExp,
						),
				)
				.max(
					createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesMax,
				),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								createExperimentWithAssignmentResponseDesignSpecMetricsItemFieldNameRegExp,
							),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(createExperimentWithAssignmentResponseDesignSpecMetricsMax),
			power: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecPowerMin)
				.max(createExperimentWithAssignmentResponseDesignSpecPowerMax)
				.default(createExperimentWithAssignmentResponseDesignSpecPowerDefault),
			alpha: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecAlphaMin)
				.max(createExperimentWithAssignmentResponseDesignSpecAlphaMax)
				.default(createExperimentWithAssignmentResponseDesignSpecAlphaDefault),
			fstat_thresh: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecFstatThreshMin)
				.max(createExperimentWithAssignmentResponseDesignSpecFstatThreshMax)
				.default(
					createExperimentWithAssignmentResponseDesignSpecFstatThreshDefault,
				),
		}),
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["online"]),
			experiment_name: zod
				.string()
				.max(
					createExperimentWithAssignmentResponseDesignSpecExperimentNameMaxOne,
				),
			description: zod
				.string()
				.max(createExperimentWithAssignmentResponseDesignSpecDescriptionMaxOne),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseDesignSpecArmsItemArmNameMaxOne,
							),
						arm_description: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseDesignSpecArmsItemArmDescriptionMaxFour,
							)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(createExperimentWithAssignmentResponseDesignSpecArmsMinOne)
				.max(createExperimentWithAssignmentResponseDesignSpecArmsMaxOne),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(
							createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesItemRegExpOne,
						),
				)
				.max(
					createExperimentWithAssignmentResponseDesignSpecStrataFieldNamesMaxOne,
				),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								createExperimentWithAssignmentResponseDesignSpecMetricsItemFieldNameRegExpOne,
							),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(createExperimentWithAssignmentResponseDesignSpecMetricsMaxOne),
			power: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecPowerMinOne)
				.max(createExperimentWithAssignmentResponseDesignSpecPowerMaxOne)
				.default(
					createExperimentWithAssignmentResponseDesignSpecPowerDefaultOne,
				),
			alpha: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecAlphaMinOne)
				.max(createExperimentWithAssignmentResponseDesignSpecAlphaMaxOne)
				.default(
					createExperimentWithAssignmentResponseDesignSpecAlphaDefaultOne,
				),
			fstat_thresh: zod
				.number()
				.min(createExperimentWithAssignmentResponseDesignSpecFstatThreshMinOne)
				.max(createExperimentWithAssignmentResponseDesignSpecFstatThreshMaxOne)
				.default(
					createExperimentWithAssignmentResponseDesignSpecFstatThreshDefaultOne,
				),
		}),
	]),
	audience_spec: zod.object({
		participant_type: zod
			.string()
			.max(
				createExperimentWithAssignmentResponseAudienceSpecParticipantTypeMax,
			),
		filters: zod
			.array(
				zod.object({
					field_name: zod
						.string()
						.regex(
							createExperimentWithAssignmentResponseAudienceSpecFiltersItemFieldNameRegExp,
						),
					relation: zod.enum(["includes", "excludes", "between"]),
					value: zod
						.array(zod.number().or(zod.null()))
						.or(zod.array(zod.number().or(zod.null())))
						.or(zod.array(zod.string().or(zod.null())))
						.or(zod.array(zod.boolean().or(zod.null()))),
				}),
			)
			.max(createExperimentWithAssignmentResponseAudienceSpecFiltersMax),
	}),
	power_analyses: zod
		.object({
			analyses: zod
				.array(
					zod.object({
						metric_spec: zod.object({
							field_name: zod
								.string()
								.regex(
									createExperimentWithAssignmentResponsePowerAnalysesAnalysesItemMetricSpecFieldNameRegExp,
								),
							metric_pct_change: zod.number().or(zod.null()).optional(),
							metric_target: zod.number().or(zod.null()).optional(),
							metric_type: zod
								.enum(["binary", "numeric"])
								.or(zod.null())
								.optional(),
							metric_baseline: zod.number().or(zod.null()).optional(),
							metric_stddev: zod.number().or(zod.null()).optional(),
							available_nonnull_n: zod.number().or(zod.null()).optional(),
							available_n: zod.number().or(zod.null()).optional(),
						}),
						target_n: zod.number().or(zod.null()).optional(),
						sufficient_n: zod.boolean().or(zod.null()).optional(),
						target_possible: zod.number().or(zod.null()).optional(),
						pct_change_possible: zod.number().or(zod.null()).optional(),
						msg: zod
							.object({
								type: zod.enum([
									"sufficient",
									"insufficient",
									"no baseline",
									"no available n",
									"zero effect size",
								]),
								msg: zod.string(),
								source_msg: zod.string(),
								values: zod
									.record(zod.string(), zod.number().or(zod.number()))
									.or(zod.null())
									.optional(),
							})
							.or(zod.null())
							.optional(),
					}),
				)
				.max(createExperimentWithAssignmentResponsePowerAnalysesAnalysesMax),
		})
		.or(zod.null()),
	assign_summary: zod.object({
		balance_check: zod
			.object({
				f_statistic: zod.number(),
				numerator_df: zod.number(),
				denominator_df: zod.number(),
				p_value: zod.number(),
				balance_ok: zod.boolean(),
			})
			.or(zod.null())
			.optional(),
		sample_size: zod.number(),
		arm_sizes: zod
			.array(
				zod.object({
					arm: zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseAssignSummaryArmSizesItemArmArmNameMax,
							),
						arm_description: zod
							.string()
							.max(
								createExperimentWithAssignmentResponseAssignSummaryArmSizesItemArmArmDescriptionMaxOne,
							)
							.or(zod.null())
							.optional(),
					}),
					size: zod.number().optional(),
				}),
			)
			.max(createExperimentWithAssignmentResponseAssignSummaryArmSizesMaxOne)
			.or(zod.null())
			.optional(),
	}),
});

/**
 * Returns the list of experiments in the datasource.
 * @summary List Experiments
 */
export const listExperimentsParams = zod.object({
	datasource_id: zod.string(),
});

export const listExperimentsResponseItemsItemDesignSpecExperimentNameMax = 100;
export const listExperimentsResponseItemsItemDesignSpecDescriptionMax = 2000;
export const listExperimentsResponseItemsItemDesignSpecArmsItemArmNameMax = 100;
export const listExperimentsResponseItemsItemDesignSpecArmsItemArmDescriptionMaxOne = 2000;
export const listExperimentsResponseItemsItemDesignSpecArmsMin = 2;

export const listExperimentsResponseItemsItemDesignSpecArmsMax = 10;
export const listExperimentsResponseItemsItemDesignSpecStrataFieldNamesItemRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemDesignSpecStrataFieldNamesMax = 150;
export const listExperimentsResponseItemsItemDesignSpecMetricsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemDesignSpecMetricsMax = 150;
export const listExperimentsResponseItemsItemDesignSpecPowerDefault = 0.8;
export const listExperimentsResponseItemsItemDesignSpecPowerMin = 0;

export const listExperimentsResponseItemsItemDesignSpecPowerMax = 1;
export const listExperimentsResponseItemsItemDesignSpecAlphaDefault = 0.05;
export const listExperimentsResponseItemsItemDesignSpecAlphaMin = 0;

export const listExperimentsResponseItemsItemDesignSpecAlphaMax = 1;
export const listExperimentsResponseItemsItemDesignSpecFstatThreshDefault = 0.6;
export const listExperimentsResponseItemsItemDesignSpecFstatThreshMin = 0;

export const listExperimentsResponseItemsItemDesignSpecFstatThreshMax = 1;
export const listExperimentsResponseItemsItemDesignSpecExperimentNameMaxOne = 100;
export const listExperimentsResponseItemsItemDesignSpecDescriptionMaxOne = 2000;
export const listExperimentsResponseItemsItemDesignSpecArmsItemArmNameMaxOne = 100;
export const listExperimentsResponseItemsItemDesignSpecArmsItemArmDescriptionMaxFour = 2000;
export const listExperimentsResponseItemsItemDesignSpecArmsMinOne = 2;

export const listExperimentsResponseItemsItemDesignSpecArmsMaxOne = 10;
export const listExperimentsResponseItemsItemDesignSpecStrataFieldNamesItemRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemDesignSpecStrataFieldNamesMaxOne = 150;
export const listExperimentsResponseItemsItemDesignSpecMetricsItemFieldNameRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemDesignSpecMetricsMaxOne = 150;
export const listExperimentsResponseItemsItemDesignSpecPowerDefaultOne = 0.8;
export const listExperimentsResponseItemsItemDesignSpecPowerMinOne = 0;

export const listExperimentsResponseItemsItemDesignSpecPowerMaxOne = 1;
export const listExperimentsResponseItemsItemDesignSpecAlphaDefaultOne = 0.05;
export const listExperimentsResponseItemsItemDesignSpecAlphaMinOne = 0;

export const listExperimentsResponseItemsItemDesignSpecAlphaMaxOne = 1;
export const listExperimentsResponseItemsItemDesignSpecFstatThreshDefaultOne = 0.6;
export const listExperimentsResponseItemsItemDesignSpecFstatThreshMinOne = 0;

export const listExperimentsResponseItemsItemDesignSpecFstatThreshMaxOne = 1;
export const listExperimentsResponseItemsItemAudienceSpecParticipantTypeMax = 100;
export const listExperimentsResponseItemsItemAudienceSpecFiltersItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemAudienceSpecFiltersMax = 20;
export const listExperimentsResponseItemsItemPowerAnalysesAnalysesItemMetricSpecFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const listExperimentsResponseItemsItemPowerAnalysesAnalysesMax = 150;
export const listExperimentsResponseItemsItemAssignSummaryArmSizesItemArmArmNameMax = 100;
export const listExperimentsResponseItemsItemAssignSummaryArmSizesItemArmArmDescriptionMaxOne = 2000;
export const listExperimentsResponseItemsItemAssignSummaryArmSizesItemSizeDefault = 0;
export const listExperimentsResponseItemsItemAssignSummaryArmSizesMaxOne = 10;

export const listExperimentsResponse = zod.object({
	items: zod.array(
		zod.object({
			datasource_id: zod.string(),
			state: zod.enum([
				"designing",
				"assigned",
				"abandoned",
				"committed",
				"aborted",
			]),
			design_spec: zod.discriminatedUnion("experiment_type", [
				zod.object({
					experiment_id: zod.string().uuid().or(zod.null()).optional(),
					experiment_type: zod.enum(["preassigned"]),
					experiment_name: zod
						.string()
						.max(listExperimentsResponseItemsItemDesignSpecExperimentNameMax),
					description: zod
						.string()
						.max(listExperimentsResponseItemsItemDesignSpecDescriptionMax),
					start_date: zod.string().datetime(),
					end_date: zod.string().datetime(),
					arms: zod
						.array(
							zod.object({
								arm_id: zod.string().uuid().or(zod.null()).optional(),
								arm_name: zod
									.string()
									.max(
										listExperimentsResponseItemsItemDesignSpecArmsItemArmNameMax,
									),
								arm_description: zod
									.string()
									.max(
										listExperimentsResponseItemsItemDesignSpecArmsItemArmDescriptionMaxOne,
									)
									.or(zod.null())
									.optional(),
							}),
						)
						.min(listExperimentsResponseItemsItemDesignSpecArmsMin)
						.max(listExperimentsResponseItemsItemDesignSpecArmsMax),
					strata_field_names: zod
						.array(
							zod
								.string()
								.regex(
									listExperimentsResponseItemsItemDesignSpecStrataFieldNamesItemRegExp,
								),
						)
						.max(listExperimentsResponseItemsItemDesignSpecStrataFieldNamesMax),
					metrics: zod
						.array(
							zod.object({
								field_name: zod
									.string()
									.regex(
										listExperimentsResponseItemsItemDesignSpecMetricsItemFieldNameRegExp,
									),
								metric_pct_change: zod.number().or(zod.null()).optional(),
								metric_target: zod.number().or(zod.null()).optional(),
							}),
						)
						.min(1)
						.max(listExperimentsResponseItemsItemDesignSpecMetricsMax),
					power: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecPowerMin)
						.max(listExperimentsResponseItemsItemDesignSpecPowerMax)
						.default(listExperimentsResponseItemsItemDesignSpecPowerDefault),
					alpha: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecAlphaMin)
						.max(listExperimentsResponseItemsItemDesignSpecAlphaMax)
						.default(listExperimentsResponseItemsItemDesignSpecAlphaDefault),
					fstat_thresh: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecFstatThreshMin)
						.max(listExperimentsResponseItemsItemDesignSpecFstatThreshMax)
						.default(
							listExperimentsResponseItemsItemDesignSpecFstatThreshDefault,
						),
				}),
				zod.object({
					experiment_id: zod.string().uuid().or(zod.null()).optional(),
					experiment_type: zod.enum(["online"]),
					experiment_name: zod
						.string()
						.max(
							listExperimentsResponseItemsItemDesignSpecExperimentNameMaxOne,
						),
					description: zod
						.string()
						.max(listExperimentsResponseItemsItemDesignSpecDescriptionMaxOne),
					start_date: zod.string().datetime(),
					end_date: zod.string().datetime(),
					arms: zod
						.array(
							zod.object({
								arm_id: zod.string().uuid().or(zod.null()).optional(),
								arm_name: zod
									.string()
									.max(
										listExperimentsResponseItemsItemDesignSpecArmsItemArmNameMaxOne,
									),
								arm_description: zod
									.string()
									.max(
										listExperimentsResponseItemsItemDesignSpecArmsItemArmDescriptionMaxFour,
									)
									.or(zod.null())
									.optional(),
							}),
						)
						.min(listExperimentsResponseItemsItemDesignSpecArmsMinOne)
						.max(listExperimentsResponseItemsItemDesignSpecArmsMaxOne),
					strata_field_names: zod
						.array(
							zod
								.string()
								.regex(
									listExperimentsResponseItemsItemDesignSpecStrataFieldNamesItemRegExpOne,
								),
						)
						.max(
							listExperimentsResponseItemsItemDesignSpecStrataFieldNamesMaxOne,
						),
					metrics: zod
						.array(
							zod.object({
								field_name: zod
									.string()
									.regex(
										listExperimentsResponseItemsItemDesignSpecMetricsItemFieldNameRegExpOne,
									),
								metric_pct_change: zod.number().or(zod.null()).optional(),
								metric_target: zod.number().or(zod.null()).optional(),
							}),
						)
						.min(1)
						.max(listExperimentsResponseItemsItemDesignSpecMetricsMaxOne),
					power: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecPowerMinOne)
						.max(listExperimentsResponseItemsItemDesignSpecPowerMaxOne)
						.default(listExperimentsResponseItemsItemDesignSpecPowerDefaultOne),
					alpha: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecAlphaMinOne)
						.max(listExperimentsResponseItemsItemDesignSpecAlphaMaxOne)
						.default(listExperimentsResponseItemsItemDesignSpecAlphaDefaultOne),
					fstat_thresh: zod
						.number()
						.min(listExperimentsResponseItemsItemDesignSpecFstatThreshMinOne)
						.max(listExperimentsResponseItemsItemDesignSpecFstatThreshMaxOne)
						.default(
							listExperimentsResponseItemsItemDesignSpecFstatThreshDefaultOne,
						),
				}),
			]),
			audience_spec: zod.object({
				participant_type: zod
					.string()
					.max(listExperimentsResponseItemsItemAudienceSpecParticipantTypeMax),
				filters: zod
					.array(
						zod.object({
							field_name: zod
								.string()
								.regex(
									listExperimentsResponseItemsItemAudienceSpecFiltersItemFieldNameRegExp,
								),
							relation: zod.enum(["includes", "excludes", "between"]),
							value: zod
								.array(zod.number().or(zod.null()))
								.or(zod.array(zod.number().or(zod.null())))
								.or(zod.array(zod.string().or(zod.null())))
								.or(zod.array(zod.boolean().or(zod.null()))),
						}),
					)
					.max(listExperimentsResponseItemsItemAudienceSpecFiltersMax),
			}),
			power_analyses: zod
				.object({
					analyses: zod
						.array(
							zod.object({
								metric_spec: zod.object({
									field_name: zod
										.string()
										.regex(
											listExperimentsResponseItemsItemPowerAnalysesAnalysesItemMetricSpecFieldNameRegExp,
										),
									metric_pct_change: zod.number().or(zod.null()).optional(),
									metric_target: zod.number().or(zod.null()).optional(),
									metric_type: zod
										.enum(["binary", "numeric"])
										.or(zod.null())
										.optional(),
									metric_baseline: zod.number().or(zod.null()).optional(),
									metric_stddev: zod.number().or(zod.null()).optional(),
									available_nonnull_n: zod.number().or(zod.null()).optional(),
									available_n: zod.number().or(zod.null()).optional(),
								}),
								target_n: zod.number().or(zod.null()).optional(),
								sufficient_n: zod.boolean().or(zod.null()).optional(),
								target_possible: zod.number().or(zod.null()).optional(),
								pct_change_possible: zod.number().or(zod.null()).optional(),
								msg: zod
									.object({
										type: zod.enum([
											"sufficient",
											"insufficient",
											"no baseline",
											"no available n",
											"zero effect size",
										]),
										msg: zod.string(),
										source_msg: zod.string(),
										values: zod
											.record(zod.string(), zod.number().or(zod.number()))
											.or(zod.null())
											.optional(),
									})
									.or(zod.null())
									.optional(),
							}),
						)
						.max(listExperimentsResponseItemsItemPowerAnalysesAnalysesMax),
				})
				.or(zod.null()),
			assign_summary: zod.object({
				balance_check: zod
					.object({
						f_statistic: zod.number(),
						numerator_df: zod.number(),
						denominator_df: zod.number(),
						p_value: zod.number(),
						balance_ok: zod.boolean(),
					})
					.or(zod.null())
					.optional(),
				sample_size: zod.number(),
				arm_sizes: zod
					.array(
						zod.object({
							arm: zod.object({
								arm_id: zod.string().uuid().or(zod.null()).optional(),
								arm_name: zod
									.string()
									.max(
										listExperimentsResponseItemsItemAssignSummaryArmSizesItemArmArmNameMax,
									),
								arm_description: zod
									.string()
									.max(
										listExperimentsResponseItemsItemAssignSummaryArmSizesItemArmArmDescriptionMaxOne,
									)
									.or(zod.null())
									.optional(),
							}),
							size: zod.number().optional(),
						}),
					)
					.max(listExperimentsResponseItemsItemAssignSummaryArmSizesMaxOne)
					.or(zod.null())
					.optional(),
			}),
		}),
	),
});

/**
 * @summary Analyze Experiment
 */
export const analyzeExperimentParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

export const analyzeExperimentQueryParams = zod.object({
	baseline_arm_id: zod.string().or(zod.null()).optional(),
});

export const analyzeExperimentResponseMetricAnalysesItemMetricFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const analyzeExperimentResponseMetricAnalysesItemArmAnalysesItemArmNameMax = 100;
export const analyzeExperimentResponseMetricAnalysesItemArmAnalysesItemArmDescriptionMaxOne = 2000;

export const analyzeExperimentResponse = zod.object({
	experiment_id: zod.string().uuid(),
	metric_analyses: zod.array(
		zod.object({
			metric_name: zod.string().or(zod.null()).optional(),
			metric: zod
				.object({
					field_name: zod
						.string()
						.regex(
							analyzeExperimentResponseMetricAnalysesItemMetricFieldNameRegExp,
						),
					metric_pct_change: zod.number().or(zod.null()).optional(),
					metric_target: zod.number().or(zod.null()).optional(),
				})
				.or(zod.null())
				.optional(),
			arm_analyses: zod.array(
				zod.object({
					arm_id: zod.string().uuid().or(zod.null()).optional(),
					arm_name: zod
						.string()
						.max(
							analyzeExperimentResponseMetricAnalysesItemArmAnalysesItemArmNameMax,
						),
					arm_description: zod
						.string()
						.max(
							analyzeExperimentResponseMetricAnalysesItemArmAnalysesItemArmDescriptionMaxOne,
						)
						.or(zod.null())
						.optional(),
					is_baseline: zod.boolean(),
					estimate: zod.number(),
					p_value: zod.number(),
					t_stat: zod.number(),
					std_error: zod.number(),
				}),
			),
		}),
	),
});

/**
 * @summary Commit Experiment
 */
export const commitExperimentParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

/**
 * @summary Abandon Experiment
 */
export const abandonExperimentParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

/**
 * Returns the experiment with the specified ID.
 * @summary Get Experiment
 */
export const getExperimentParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

export const getExperimentResponseDesignSpecExperimentNameMax = 100;
export const getExperimentResponseDesignSpecDescriptionMax = 2000;
export const getExperimentResponseDesignSpecArmsItemArmNameMax = 100;
export const getExperimentResponseDesignSpecArmsItemArmDescriptionMaxOne = 2000;
export const getExperimentResponseDesignSpecArmsMin = 2;

export const getExperimentResponseDesignSpecArmsMax = 10;
export const getExperimentResponseDesignSpecStrataFieldNamesItemRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponseDesignSpecStrataFieldNamesMax = 150;
export const getExperimentResponseDesignSpecMetricsItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponseDesignSpecMetricsMax = 150;
export const getExperimentResponseDesignSpecPowerDefault = 0.8;
export const getExperimentResponseDesignSpecPowerMin = 0;

export const getExperimentResponseDesignSpecPowerMax = 1;
export const getExperimentResponseDesignSpecAlphaDefault = 0.05;
export const getExperimentResponseDesignSpecAlphaMin = 0;

export const getExperimentResponseDesignSpecAlphaMax = 1;
export const getExperimentResponseDesignSpecFstatThreshDefault = 0.6;
export const getExperimentResponseDesignSpecFstatThreshMin = 0;

export const getExperimentResponseDesignSpecFstatThreshMax = 1;
export const getExperimentResponseDesignSpecExperimentNameMaxOne = 100;
export const getExperimentResponseDesignSpecDescriptionMaxOne = 2000;
export const getExperimentResponseDesignSpecArmsItemArmNameMaxOne = 100;
export const getExperimentResponseDesignSpecArmsItemArmDescriptionMaxFour = 2000;
export const getExperimentResponseDesignSpecArmsMinOne = 2;

export const getExperimentResponseDesignSpecArmsMaxOne = 10;
export const getExperimentResponseDesignSpecStrataFieldNamesItemRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponseDesignSpecStrataFieldNamesMaxOne = 150;
export const getExperimentResponseDesignSpecMetricsItemFieldNameRegExpOne =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponseDesignSpecMetricsMaxOne = 150;
export const getExperimentResponseDesignSpecPowerDefaultOne = 0.8;
export const getExperimentResponseDesignSpecPowerMinOne = 0;

export const getExperimentResponseDesignSpecPowerMaxOne = 1;
export const getExperimentResponseDesignSpecAlphaDefaultOne = 0.05;
export const getExperimentResponseDesignSpecAlphaMinOne = 0;

export const getExperimentResponseDesignSpecAlphaMaxOne = 1;
export const getExperimentResponseDesignSpecFstatThreshDefaultOne = 0.6;
export const getExperimentResponseDesignSpecFstatThreshMinOne = 0;

export const getExperimentResponseDesignSpecFstatThreshMaxOne = 1;
export const getExperimentResponseAudienceSpecParticipantTypeMax = 100;
export const getExperimentResponseAudienceSpecFiltersItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponseAudienceSpecFiltersMax = 20;
export const getExperimentResponsePowerAnalysesAnalysesItemMetricSpecFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentResponsePowerAnalysesAnalysesMax = 150;
export const getExperimentResponseAssignSummaryArmSizesItemArmArmNameMax = 100;
export const getExperimentResponseAssignSummaryArmSizesItemArmArmDescriptionMaxOne = 2000;
export const getExperimentResponseAssignSummaryArmSizesItemSizeDefault = 0;
export const getExperimentResponseAssignSummaryArmSizesMaxOne = 10;

export const getExperimentResponse = zod.object({
	datasource_id: zod.string(),
	state: zod.enum([
		"designing",
		"assigned",
		"abandoned",
		"committed",
		"aborted",
	]),
	design_spec: zod.discriminatedUnion("experiment_type", [
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["preassigned"]),
			experiment_name: zod
				.string()
				.max(getExperimentResponseDesignSpecExperimentNameMax),
			description: zod
				.string()
				.max(getExperimentResponseDesignSpecDescriptionMax),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(getExperimentResponseDesignSpecArmsItemArmNameMax),
						arm_description: zod
							.string()
							.max(getExperimentResponseDesignSpecArmsItemArmDescriptionMaxOne)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(getExperimentResponseDesignSpecArmsMin)
				.max(getExperimentResponseDesignSpecArmsMax),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(getExperimentResponseDesignSpecStrataFieldNamesItemRegExp),
				)
				.max(getExperimentResponseDesignSpecStrataFieldNamesMax),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(getExperimentResponseDesignSpecMetricsItemFieldNameRegExp),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(getExperimentResponseDesignSpecMetricsMax),
			power: zod
				.number()
				.min(getExperimentResponseDesignSpecPowerMin)
				.max(getExperimentResponseDesignSpecPowerMax)
				.default(getExperimentResponseDesignSpecPowerDefault),
			alpha: zod
				.number()
				.min(getExperimentResponseDesignSpecAlphaMin)
				.max(getExperimentResponseDesignSpecAlphaMax)
				.default(getExperimentResponseDesignSpecAlphaDefault),
			fstat_thresh: zod
				.number()
				.min(getExperimentResponseDesignSpecFstatThreshMin)
				.max(getExperimentResponseDesignSpecFstatThreshMax)
				.default(getExperimentResponseDesignSpecFstatThreshDefault),
		}),
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["online"]),
			experiment_name: zod
				.string()
				.max(getExperimentResponseDesignSpecExperimentNameMaxOne),
			description: zod
				.string()
				.max(getExperimentResponseDesignSpecDescriptionMaxOne),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(getExperimentResponseDesignSpecArmsItemArmNameMaxOne),
						arm_description: zod
							.string()
							.max(getExperimentResponseDesignSpecArmsItemArmDescriptionMaxFour)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(getExperimentResponseDesignSpecArmsMinOne)
				.max(getExperimentResponseDesignSpecArmsMaxOne),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(
							getExperimentResponseDesignSpecStrataFieldNamesItemRegExpOne,
						),
				)
				.max(getExperimentResponseDesignSpecStrataFieldNamesMaxOne),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								getExperimentResponseDesignSpecMetricsItemFieldNameRegExpOne,
							),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(getExperimentResponseDesignSpecMetricsMaxOne),
			power: zod
				.number()
				.min(getExperimentResponseDesignSpecPowerMinOne)
				.max(getExperimentResponseDesignSpecPowerMaxOne)
				.default(getExperimentResponseDesignSpecPowerDefaultOne),
			alpha: zod
				.number()
				.min(getExperimentResponseDesignSpecAlphaMinOne)
				.max(getExperimentResponseDesignSpecAlphaMaxOne)
				.default(getExperimentResponseDesignSpecAlphaDefaultOne),
			fstat_thresh: zod
				.number()
				.min(getExperimentResponseDesignSpecFstatThreshMinOne)
				.max(getExperimentResponseDesignSpecFstatThreshMaxOne)
				.default(getExperimentResponseDesignSpecFstatThreshDefaultOne),
		}),
	]),
	audience_spec: zod.object({
		participant_type: zod
			.string()
			.max(getExperimentResponseAudienceSpecParticipantTypeMax),
		filters: zod
			.array(
				zod.object({
					field_name: zod
						.string()
						.regex(getExperimentResponseAudienceSpecFiltersItemFieldNameRegExp),
					relation: zod.enum(["includes", "excludes", "between"]),
					value: zod
						.array(zod.number().or(zod.null()))
						.or(zod.array(zod.number().or(zod.null())))
						.or(zod.array(zod.string().or(zod.null())))
						.or(zod.array(zod.boolean().or(zod.null()))),
				}),
			)
			.max(getExperimentResponseAudienceSpecFiltersMax),
	}),
	power_analyses: zod
		.object({
			analyses: zod
				.array(
					zod.object({
						metric_spec: zod.object({
							field_name: zod
								.string()
								.regex(
									getExperimentResponsePowerAnalysesAnalysesItemMetricSpecFieldNameRegExp,
								),
							metric_pct_change: zod.number().or(zod.null()).optional(),
							metric_target: zod.number().or(zod.null()).optional(),
							metric_type: zod
								.enum(["binary", "numeric"])
								.or(zod.null())
								.optional(),
							metric_baseline: zod.number().or(zod.null()).optional(),
							metric_stddev: zod.number().or(zod.null()).optional(),
							available_nonnull_n: zod.number().or(zod.null()).optional(),
							available_n: zod.number().or(zod.null()).optional(),
						}),
						target_n: zod.number().or(zod.null()).optional(),
						sufficient_n: zod.boolean().or(zod.null()).optional(),
						target_possible: zod.number().or(zod.null()).optional(),
						pct_change_possible: zod.number().or(zod.null()).optional(),
						msg: zod
							.object({
								type: zod.enum([
									"sufficient",
									"insufficient",
									"no baseline",
									"no available n",
									"zero effect size",
								]),
								msg: zod.string(),
								source_msg: zod.string(),
								values: zod
									.record(zod.string(), zod.number().or(zod.number()))
									.or(zod.null())
									.optional(),
							})
							.or(zod.null())
							.optional(),
					}),
				)
				.max(getExperimentResponsePowerAnalysesAnalysesMax),
		})
		.or(zod.null()),
	assign_summary: zod.object({
		balance_check: zod
			.object({
				f_statistic: zod.number(),
				numerator_df: zod.number(),
				denominator_df: zod.number(),
				p_value: zod.number(),
				balance_ok: zod.boolean(),
			})
			.or(zod.null())
			.optional(),
		sample_size: zod.number(),
		arm_sizes: zod
			.array(
				zod.object({
					arm: zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(getExperimentResponseAssignSummaryArmSizesItemArmArmNameMax),
						arm_description: zod
							.string()
							.max(
								getExperimentResponseAssignSummaryArmSizesItemArmArmDescriptionMaxOne,
							)
							.or(zod.null())
							.optional(),
					}),
					size: zod.number().optional(),
				}),
			)
			.max(getExperimentResponseAssignSummaryArmSizesMaxOne)
			.or(zod.null())
			.optional(),
	}),
});

/**
 * Deletes the experiment with the specified ID.
 * @summary Delete Experiment
 */
export const deleteExperimentParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

/**
 * @summary Get Experiment Assignments
 */
export const getExperimentAssignmentsParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

export const getExperimentAssignmentsResponseAssignmentsItemParticipantIdMax = 64;
export const getExperimentAssignmentsResponseAssignmentsItemArmNameMax = 100;
export const getExperimentAssignmentsResponseAssignmentsItemStrataItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentAssignmentsResponseAssignmentsItemStrataMaxOne = 150;

export const getExperimentAssignmentsResponse = zod.object({
	balance_check: zod
		.object({
			f_statistic: zod.number(),
			numerator_df: zod.number(),
			denominator_df: zod.number(),
			p_value: zod.number(),
			balance_ok: zod.boolean(),
		})
		.or(zod.null())
		.optional(),
	experiment_id: zod.string().uuid(),
	sample_size: zod.number(),
	assignments: zod.array(
		zod.object({
			participant_id: zod
				.string()
				.max(getExperimentAssignmentsResponseAssignmentsItemParticipantIdMax),
			arm_id: zod.string().uuid(),
			arm_name: zod
				.string()
				.max(getExperimentAssignmentsResponseAssignmentsItemArmNameMax),
			strata: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								getExperimentAssignmentsResponseAssignmentsItemStrataItemFieldNameRegExp,
							),
						strata_value: zod.string().or(zod.null()).optional(),
					}),
				)
				.max(getExperimentAssignmentsResponseAssignmentsItemStrataMaxOne)
				.or(zod.null())
				.optional(),
		}),
	),
});

/**
 * @summary Export experiment assignments as CSV file; BalanceCheck not included. csv header form: participant_id,arm_id,arm_name,strata_name1,strata_name2,...
 */
export const getExperimentAssignmentsAsCsvParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
});

export const getExperimentAssignmentsAsCsvResponse = zod.any();

/**
 * Get the assignment for a specific participant, excluding strata if any.
    For 'preassigned' experiments, the participant's Assignment is returned if it exists.
    For 'online', returns the assignment if it exists, else generates an assignment.
 * @summary Get Experiment Assignment For Participant
 */
export const getExperimentAssignmentForParticipantParams = zod.object({
	datasource_id: zod.string(),
	experiment_id: zod.string(),
	participant_id: zod.string(),
});

export const getExperimentAssignmentForParticipantResponseAssignmentParticipantIdMax = 64;
export const getExperimentAssignmentForParticipantResponseAssignmentArmNameMax = 100;
export const getExperimentAssignmentForParticipantResponseAssignmentStrataItemFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const getExperimentAssignmentForParticipantResponseAssignmentStrataMaxOne = 150;

export const getExperimentAssignmentForParticipantResponse = zod.object({
	experiment_id: zod.string(),
	participant_id: zod.string(),
	assignment: zod
		.object({
			participant_id: zod
				.string()
				.max(
					getExperimentAssignmentForParticipantResponseAssignmentParticipantIdMax,
				),
			arm_id: zod.string().uuid(),
			arm_name: zod
				.string()
				.max(getExperimentAssignmentForParticipantResponseAssignmentArmNameMax),
			strata: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(
								getExperimentAssignmentForParticipantResponseAssignmentStrataItemFieldNameRegExp,
							),
						strata_value: zod.string().or(zod.null()).optional(),
					}),
				)
				.max(
					getExperimentAssignmentForParticipantResponseAssignmentStrataMaxOne,
				)
				.or(zod.null())
				.optional(),
		})
		.or(zod.null()),
});

/**
 * @summary Power Check
 */
export const powerCheckParams = zod.object({
	datasource_id: zod.string(),
});

export const powerCheckBodyDesignSpecExperimentNameMax = 100;
export const powerCheckBodyDesignSpecDescriptionMax = 2000;
export const powerCheckBodyDesignSpecArmsItemArmNameMax = 100;
export const powerCheckBodyDesignSpecArmsItemArmDescriptionMaxOne = 2000;
export const powerCheckBodyDesignSpecArmsMin = 2;

export const powerCheckBodyDesignSpecArmsMax = 10;
export const powerCheckBodyDesignSpecStrataFieldNamesItemRegExp = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const powerCheckBodyDesignSpecStrataFieldNamesMax = 150;
export const powerCheckBodyDesignSpecMetricsItemFieldNameRegExp = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const powerCheckBodyDesignSpecMetricsMax = 150;
export const powerCheckBodyDesignSpecPowerDefault = 0.8;
export const powerCheckBodyDesignSpecPowerMin = 0;

export const powerCheckBodyDesignSpecPowerMax = 1;
export const powerCheckBodyDesignSpecAlphaDefault = 0.05;
export const powerCheckBodyDesignSpecAlphaMin = 0;

export const powerCheckBodyDesignSpecAlphaMax = 1;
export const powerCheckBodyDesignSpecFstatThreshDefault = 0.6;
export const powerCheckBodyDesignSpecFstatThreshMin = 0;

export const powerCheckBodyDesignSpecFstatThreshMax = 1;
export const powerCheckBodyDesignSpecExperimentNameMaxOne = 100;
export const powerCheckBodyDesignSpecDescriptionMaxOne = 2000;
export const powerCheckBodyDesignSpecArmsItemArmNameMaxOne = 100;
export const powerCheckBodyDesignSpecArmsItemArmDescriptionMaxFour = 2000;
export const powerCheckBodyDesignSpecArmsMinOne = 2;

export const powerCheckBodyDesignSpecArmsMaxOne = 10;
export const powerCheckBodyDesignSpecStrataFieldNamesItemRegExpOne = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const powerCheckBodyDesignSpecStrataFieldNamesMaxOne = 150;
export const powerCheckBodyDesignSpecMetricsItemFieldNameRegExpOne = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const powerCheckBodyDesignSpecMetricsMaxOne = 150;
export const powerCheckBodyDesignSpecPowerDefaultOne = 0.8;
export const powerCheckBodyDesignSpecPowerMinOne = 0;

export const powerCheckBodyDesignSpecPowerMaxOne = 1;
export const powerCheckBodyDesignSpecAlphaDefaultOne = 0.05;
export const powerCheckBodyDesignSpecAlphaMinOne = 0;

export const powerCheckBodyDesignSpecAlphaMaxOne = 1;
export const powerCheckBodyDesignSpecFstatThreshDefaultOne = 0.6;
export const powerCheckBodyDesignSpecFstatThreshMinOne = 0;

export const powerCheckBodyDesignSpecFstatThreshMaxOne = 1;
export const powerCheckBodyAudienceSpecParticipantTypeMax = 100;
export const powerCheckBodyAudienceSpecFiltersItemFieldNameRegExp = new RegExp(
	"^[a-zA-Z_][a-zA-Z0-9_]*$",
);
export const powerCheckBodyAudienceSpecFiltersMax = 20;

export const powerCheckBody = zod.object({
	design_spec: zod.discriminatedUnion("experiment_type", [
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["preassigned"]),
			experiment_name: zod
				.string()
				.max(powerCheckBodyDesignSpecExperimentNameMax),
			description: zod.string().max(powerCheckBodyDesignSpecDescriptionMax),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(powerCheckBodyDesignSpecArmsItemArmNameMax),
						arm_description: zod
							.string()
							.max(powerCheckBodyDesignSpecArmsItemArmDescriptionMaxOne)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(powerCheckBodyDesignSpecArmsMin)
				.max(powerCheckBodyDesignSpecArmsMax),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(powerCheckBodyDesignSpecStrataFieldNamesItemRegExp),
				)
				.max(powerCheckBodyDesignSpecStrataFieldNamesMax),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(powerCheckBodyDesignSpecMetricsItemFieldNameRegExp),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(powerCheckBodyDesignSpecMetricsMax),
			power: zod
				.number()
				.min(powerCheckBodyDesignSpecPowerMin)
				.max(powerCheckBodyDesignSpecPowerMax)
				.default(powerCheckBodyDesignSpecPowerDefault),
			alpha: zod
				.number()
				.min(powerCheckBodyDesignSpecAlphaMin)
				.max(powerCheckBodyDesignSpecAlphaMax)
				.default(powerCheckBodyDesignSpecAlphaDefault),
			fstat_thresh: zod
				.number()
				.min(powerCheckBodyDesignSpecFstatThreshMin)
				.max(powerCheckBodyDesignSpecFstatThreshMax)
				.default(powerCheckBodyDesignSpecFstatThreshDefault),
		}),
		zod.object({
			experiment_id: zod.string().uuid().or(zod.null()).optional(),
			experiment_type: zod.enum(["online"]),
			experiment_name: zod
				.string()
				.max(powerCheckBodyDesignSpecExperimentNameMaxOne),
			description: zod.string().max(powerCheckBodyDesignSpecDescriptionMaxOne),
			start_date: zod.string().datetime(),
			end_date: zod.string().datetime(),
			arms: zod
				.array(
					zod.object({
						arm_id: zod.string().uuid().or(zod.null()).optional(),
						arm_name: zod
							.string()
							.max(powerCheckBodyDesignSpecArmsItemArmNameMaxOne),
						arm_description: zod
							.string()
							.max(powerCheckBodyDesignSpecArmsItemArmDescriptionMaxFour)
							.or(zod.null())
							.optional(),
					}),
				)
				.min(powerCheckBodyDesignSpecArmsMinOne)
				.max(powerCheckBodyDesignSpecArmsMaxOne),
			strata_field_names: zod
				.array(
					zod
						.string()
						.regex(powerCheckBodyDesignSpecStrataFieldNamesItemRegExpOne),
				)
				.max(powerCheckBodyDesignSpecStrataFieldNamesMaxOne),
			metrics: zod
				.array(
					zod.object({
						field_name: zod
							.string()
							.regex(powerCheckBodyDesignSpecMetricsItemFieldNameRegExpOne),
						metric_pct_change: zod.number().or(zod.null()).optional(),
						metric_target: zod.number().or(zod.null()).optional(),
					}),
				)
				.min(1)
				.max(powerCheckBodyDesignSpecMetricsMaxOne),
			power: zod
				.number()
				.min(powerCheckBodyDesignSpecPowerMinOne)
				.max(powerCheckBodyDesignSpecPowerMaxOne)
				.default(powerCheckBodyDesignSpecPowerDefaultOne),
			alpha: zod
				.number()
				.min(powerCheckBodyDesignSpecAlphaMinOne)
				.max(powerCheckBodyDesignSpecAlphaMaxOne)
				.default(powerCheckBodyDesignSpecAlphaDefaultOne),
			fstat_thresh: zod
				.number()
				.min(powerCheckBodyDesignSpecFstatThreshMinOne)
				.max(powerCheckBodyDesignSpecFstatThreshMaxOne)
				.default(powerCheckBodyDesignSpecFstatThreshDefaultOne),
		}),
	]),
	audience_spec: zod.object({
		participant_type: zod
			.string()
			.max(powerCheckBodyAudienceSpecParticipantTypeMax),
		filters: zod
			.array(
				zod.object({
					field_name: zod
						.string()
						.regex(powerCheckBodyAudienceSpecFiltersItemFieldNameRegExp),
					relation: zod.enum(["includes", "excludes", "between"]),
					value: zod
						.array(zod.number().or(zod.null()))
						.or(zod.array(zod.number().or(zod.null())))
						.or(zod.array(zod.string().or(zod.null())))
						.or(zod.array(zod.boolean().or(zod.null()))),
				}),
			)
			.max(powerCheckBodyAudienceSpecFiltersMax),
	}),
});

export const powerCheckResponseAnalysesItemMetricSpecFieldNameRegExp =
	new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$");
export const powerCheckResponseAnalysesMax = 150;

export const powerCheckResponse = zod.object({
	analyses: zod
		.array(
			zod.object({
				metric_spec: zod.object({
					field_name: zod
						.string()
						.regex(powerCheckResponseAnalysesItemMetricSpecFieldNameRegExp),
					metric_pct_change: zod.number().or(zod.null()).optional(),
					metric_target: zod.number().or(zod.null()).optional(),
					metric_type: zod
						.enum(["binary", "numeric"])
						.or(zod.null())
						.optional(),
					metric_baseline: zod.number().or(zod.null()).optional(),
					metric_stddev: zod.number().or(zod.null()).optional(),
					available_nonnull_n: zod.number().or(zod.null()).optional(),
					available_n: zod.number().or(zod.null()).optional(),
				}),
				target_n: zod.number().or(zod.null()).optional(),
				sufficient_n: zod.boolean().or(zod.null()).optional(),
				target_possible: zod.number().or(zod.null()).optional(),
				pct_change_possible: zod.number().or(zod.null()).optional(),
				msg: zod
					.object({
						type: zod.enum([
							"sufficient",
							"insufficient",
							"no baseline",
							"no available n",
							"zero effect size",
						]),
						msg: zod.string(),
						source_msg: zod.string(),
						values: zod
							.record(zod.string(), zod.number().or(zod.number()))
							.or(zod.null())
							.optional(),
					})
					.or(zod.null())
					.optional(),
			}),
		)
		.max(powerCheckResponseAnalysesMax),
});
