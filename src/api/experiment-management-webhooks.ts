/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * xngin: Experiments API
 * OpenAPI spec version: 0.9.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import type {
	AssignmentFileParams,
	HTTPValidationError,
	UpdateExperimentParams,
	WebhookResponse,
	WebhookUpdateCommitRequest,
} from "./methods.schemas";

import { orvalFetch } from "../services/orval-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Retrieve all participant assignments for the given experiment_id.
 */
export type assignmentFileResponse200 = {
	data: WebhookResponse;
	status: 200;
};

export type assignmentFileResponse422 = {
	data: HTTPValidationError;
	status: 422;
};

export type assignmentFileResponse502 = {
	data: WebhookResponse;
	status: 502;
};

export type assignmentFileResponseComposite =
	| assignmentFileResponse200
	| assignmentFileResponse422
	| assignmentFileResponse502;

export type assignmentFileResponse = assignmentFileResponseComposite & {
	headers: Headers;
};

export const getAssignmentFileUrl = (params: AssignmentFileParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `/v1/assignment-file?${stringifiedParams}`
		: `/v1/assignment-file`;
};

export const assignmentFile = async (
	params: AssignmentFileParams,
	options?: RequestInit,
): Promise<assignmentFileResponse> => {
	return orvalFetch<assignmentFileResponse>(getAssignmentFileUrl(params), {
		...options,
		method: "GET",
	});
};

export const getAssignmentFileKey = (params: AssignmentFileParams) =>
	[`/v1/assignment-file`, ...(params ? [params] : [])] as const;

export type AssignmentFileQueryResult = NonNullable<
	Awaited<ReturnType<typeof assignmentFile>>
>;
export type AssignmentFileQueryError = HTTPValidationError | WebhookResponse;

/**
 * @summary Retrieve all participant assignments for the given experiment_id.
 */
export const useAssignmentFile = <
	TError = HTTPValidationError | WebhookResponse,
>(
	params: AssignmentFileParams,
	options?: {
		swr?: SWRConfiguration<
			Awaited<ReturnType<typeof assignmentFile>>,
			TError
		> & { swrKey?: Key; enabled?: boolean };
		request?: SecondParameter<typeof orvalFetch>;
	},
) => {
	const { swr: swrOptions, request: requestOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ??
		(() => (isEnabled ? getAssignmentFileKey(params) : null));
	const swrFn = () => assignmentFile(params, requestOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};
/**
 * @summary Update an existing experiment's timestamps or description (experiment and arms)
 */
export type updateExperimentResponse200 = {
	data: WebhookResponse;
	status: 200;
};

export type updateExperimentResponse422 = {
	data: HTTPValidationError;
	status: 422;
};

export type updateExperimentResponse502 = {
	data: WebhookResponse;
	status: 502;
};

export type updateExperimentResponseComposite =
	| updateExperimentResponse200
	| updateExperimentResponse422
	| updateExperimentResponse502;

export type updateExperimentResponse = updateExperimentResponseComposite & {
	headers: Headers;
};

export const getUpdateExperimentUrl = (params: UpdateExperimentParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `/v1/update-commit?${stringifiedParams}`
		: `/v1/update-commit`;
};

export const updateExperiment = async (
	webhookUpdateCommitRequest: WebhookUpdateCommitRequest,
	params: UpdateExperimentParams,
	options?: RequestInit,
): Promise<updateExperimentResponse> => {
	return orvalFetch<updateExperimentResponse>(getUpdateExperimentUrl(params), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(webhookUpdateCommitRequest),
	});
};

export const getUpdateExperimentMutationFetcher = (
	params: UpdateExperimentParams,
	options?: SecondParameter<typeof orvalFetch>,
) => {
	return (
		_: Key,
		{ arg }: { arg: WebhookUpdateCommitRequest },
	): Promise<updateExperimentResponse> => {
		return updateExperiment(arg, params, options);
	};
};
export const getUpdateExperimentMutationKey = (
	params: UpdateExperimentParams,
) => [`/v1/update-commit`, ...(params ? [params] : [])] as const;

export type UpdateExperimentMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateExperiment>>
>;
export type UpdateExperimentMutationError =
	| HTTPValidationError
	| WebhookResponse;

/**
 * @summary Update an existing experiment's timestamps or description (experiment and arms)
 */
export const useUpdateExperiment = <
	TError = HTTPValidationError | WebhookResponse,
>(
	params: UpdateExperimentParams,
	options?: {
		swr?: SWRMutationConfiguration<
			Awaited<ReturnType<typeof updateExperiment>>,
			TError,
			Key,
			WebhookUpdateCommitRequest,
			Awaited<ReturnType<typeof updateExperiment>>
		> & { swrKey?: string };
		request?: SecondParameter<typeof orvalFetch>;
	},
) => {
	const { swr: swrOptions, request: requestOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getUpdateExperimentMutationKey(params);
	const swrFn = getUpdateExperimentMutationFetcher(params, requestOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};
