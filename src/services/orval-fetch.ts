import { currentIdToken } from '@/app/providers/use-auth-storage';
import { API_BASE_URL } from '@/services/constants';
import { API_401_EVENT } from '@/app/providers/auth-provider';
import { HTTPValidationError } from '@/api/methods.schemas';

/** Error raised when the FastAPI backend returned a Pydantic HTTPValidationError. */
export class ApiValidationError extends Error {
  public readonly data: HTTPValidationError;
  public readonly status: 422;

  constructor(response: { status: 422; data: HTTPValidationError }) {
    super(`API 422 Error: ${response.status}`);
    Object.setPrototypeOf(this, ApiValidationError.prototype);
    this.data = response.data;
    this.status = response.status;
    this.name = 'ApiValidationError';
  }
}

/**
 * Error raised when the FastAPI backend returned an unsuccessful response.
 */
export class ApiError extends Error {
  constructor(public readonly response: { status: number; data: unknown }) {
    super(`API Error: ${JSON.stringify(response)}`);
    Object.setPrototypeOf(this, ApiError.prototype);
    this.name = 'ApiError';
  }
}

const getBody = (c: Response) => {
  const contentType = c.headers.get('content-type');
  if (contentType && contentType.includes('application/json')) {
    return c.json();
  }
  if (contentType && contentType.includes('text/csv')) {
    return c.text();
  }
  if (c.status === 204) {
    return null;
  }
  throw Error('Backend returned unsupported content-type.');
};

// Returns headers to send with API requests. If we currently have an idToken in localStorage, we also send that. Note
// that this means we may generate requests that do not contain the idToken.
const getHeaders = (options: RequestInit) => {
  const idToken = currentIdToken();
  return {
    ...options.headers,
    'Content-Type': 'application/json',
    ...(idToken && { Authorization: 'Bearer ' + idToken }),
  };
};

const sendCustomLogoutEvent = () => {
  window.dispatchEvent(new CustomEvent(API_401_EVENT));
};

/**
 * orvalFetch is used by Orval's generated API clients as the "fetcher". It handles all API requests made by the Orval
 * code.
 *
 * It takes care of:
 * - Adding authentication headers (from localstorage)
 * - Processing responses (reading the body and handling content-type variations)
 * - Handling errors in a consistent way
 *
 * When an API call succeeds, the data is returned directly.
 *
 * When an API call fails (non-2xx response):
 * - For regular function calls: the error is thrown.
 * - For data loading hooks: the error appears in the `error` property.
 * - For mutation triggers: the error is thrown when trigger is invoked.
 *
 * The thrown error may be inspected; if it is an ApiValidationError, you can extract structured information from
 * the error.
 *
 * See orval.config.ts for configuration details.
 */
export const orvalFetch = async <T>(path: string, options: RequestInit): Promise<T> => {
  const requestUrl = new URL(path, API_BASE_URL);
  const requestInit: RequestInit = {
    ...options,
    headers: getHeaders(options),
  };
  const request = new Request(requestUrl, requestInit);
  const response = await fetch(request);
  const data = await getBody(response);

  if (request.headers.has('Authorization') && response.status === 401) {
    // Orval doesn't allow us to pass through context so we cannot invoke the logout() handler directly; instead,
    // we trigger a custom event which auth-provider will react to.
    sendCustomLogoutEvent();
  }
  const result = { status: response.status, data: data, headers: response.headers };
  if (result.status === 422 && result.data.detail?.length > 0) {
    throw new ApiValidationError({ ...result, status: 422 });
  } else if (response.status < 200 || response.status >= 300) {
    throw new ApiError(result);
  }
  return data;
};

/**
 * ErrorType is used by the Orval-generated client code to add some type safety to the `error` values returned by
 * the SWR hooks. Its existence as an exported variable influences Orval's code generation.
 *
 * The API client code is automatically generated from our OpenAPI spec, which is generated by FastAPI,
 * and it expects error responses to match specific types defined in that specification. When the generator knows what
 * error type to expect (like FastAPI's handling of Pydantic validation errors with status 422), it will use that
 * specific type. For other cases, it uses 'unknown'. There are many instances where unknown is used because FastAPI
 * cannot automatically generate error types for all possible errors.
 *
 * However, our backend can return errors that aren't explicitly defined in the API spec. So instead of using the
 * generated error types (which would be incomplete), we use our own custom error types (ApiError, ApiValidationError)
 * that can handle common error scenarios.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export type ErrorType<GeneratedErrorPayload> = Error | ApiValidationError | ApiError;
